package com.ji.dao.cm.oam;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.regex.Pattern;import javax.annotation.Resource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ji.cm.CM_Util;import com.ji.cm.SendEmail;import com.ji.cm.SendSms;import com.ji.dao.cm.CMDAO;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.common.DateUtility;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.common.JasyptUtil;import com.ji.common.StringUtil;import egovframework.rte.fdl.property.EgovPropertyService;import com.ksign.securedb.api.SDBCrypto;import com.ksign.securedb.api.util.*;/**   * @Class Name : cmOamDAO02.java * @Description : cmOamDAO02 DAO Class  * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2015.03.20           최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2015.03.20 * @version 1.0 * @see *  */@Repository("cmOamDAO02")public class CmOamDAO02 extends CmsDsDao {	protected Logger log = Logger.getLogger(CmOamDAO02.class); //현재 클래스 이름을 Logger에 등록	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;        /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;          /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;	    	/** cmDAO */    @Resource(name="cmOamDAO01")    private CmOamDAO01 cmOamDAO01;            /** sendEmail */    @Resource(name="sendEmail")    private SendEmail sendEmail;	//메일발송        /** sendSms */    @Resource(name="sendSms")    private SendSms sendSms;		//문자발송        /** jasyptUtil  */     @Resource(name = "jasyptUtil")    private JasyptUtil JasyptUtil;          /**	 * 관리자관리 메소드	 * @param Map	 * @return 메뉴트리	 * @exception Exception	 */    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {		//	TODO ctlCMS		log.debug("==== ctlCMS Start ====");		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");		try{						if(pstate.equals("L")){						// 조직트리리스트			}else if(pstate.equals("XL2")){ //ajax jqGrid data관련				result_map = cmOamDAO01.selectListOrgTree(param);						// 인력정보 LIST			}else if(pstate.equals("XL1")){ //ajax jqGrid data관련								result_map = cmDAO.selectListGrid(param, "JiCmOam.selectOrgAdminList");		  		//list("JiCmOam.selectOrgAdminList", param);			}else if(pstate.equals("XP2")){				param.put("per_id", HtmlTag.returnString((String)param.get("per_id"),""));				result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpList");			}else if(pstate.equals("XP3")){				param.put("sauth_grp_cd", HtmlTag.returnString((String)param.get("per_cd"),""));				result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpMenuList");			// 등록 기준정보 상세 데이터			}else if(pstate.equals("CF")){				result_map.put("grd_cd_opts",cmDAO.bizMakeOptionList("M00007", ""));	//직급				result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("tel_cd_opts",cmDAO.bizMakeOptionListText("M00008", ""));	//일반전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//이메일											// 수정화면			}else if(pstate.equals("UF")){				result_map = cmDAO.getformData(param, "JiCmOam.selectOrgAdminList");				result_map.put("grd_cd_opts",cmDAO.bizMakeOptionList("M00007", ""));	//직급				result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("tel_cd_opts",cmDAO.bizMakeOptionListText("M00008", ""));	//일반전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//이메일											// 등록			}else if(pstate.equals("C") || pstate.equals("C1")){				result_map = insertCMOAM(param);									// 수정			}else if(pstate.equals("U") || pstate.equals("U1")){				result_map = updateCMOAM(param);							// 정보변경 로그인사용자 정보 조회			}else if(pstate.equals("X3")){				 Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));				    String USER_ID ="";				    if(SITE_ADM_SESSION!=null){				    	USER_ID	= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));				    	param.put("login_sess_id", USER_ID);				    }								result_map = cmDAO.getformData(param, "JiCmOam.selectAdmInfo");					//.get("ViewMap")			// 정보변경 로그인사용자 정보 수정			}else if(pstate.equals("U3")){				result_map = updateCMOAM3(param);			// 삭제			}else if(pstate.equals("D")){				result_map = deleteCMOAM(param);							//비밀번호 초기화			}else if(pstate.equals("PU")){				result_map = initPass(param);							//로그인실패횟수초기화			}else if(pstate.equals("PU1")){				result_map = initLogCnt(param);							//가입승인			}else if(pstate.equals("PU2")){				result_map = joinUser(param);							// 비밀번호 변경시 비밀번호 확인			}else if(pstate.equals("P3")){				result_map = checkPass(param);							// 비밀번호 변경			}else if(pstate.equals("P4")){				result_map = changePass(param);				// 전체 비밀번호 초기화			}else if(pstate.equals("PU5")){				result_map = initAllPass(param);							// 인사정보 강제연계			}else if(pstate.equals("PU6")){				result_map = insertJIT9120_UPDATEJob(param);							}		}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}		    	log.debug("==== ctlCMS End ====");		return result_map;    }    	/**	* <p> 인력정보 ID 및 password 생성시 prefix 값 추줄</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* Postcondition: 조회 결과를 리턴한다 	*	* @param   TabName		String		테이블명	* @param   ColName		String		컬럼명	* @param   WhereStr		String		where조건	* @param   ColLen		int			컬럼길이	* 	* @return  	 * @throws ISPException 	* @throws  	*/	public String getprefix(String org_cd) throws Exception {		String sql = "cmOamDAO.getprefix";			Map param = new HashMap();		param.put("org_cd", org_cd);		List list = new ArrayList();			list =  list(sql, param);			return (String) list.get(0);	}	        		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertCMOAM	public Map insertCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== insertCMOAM : START ====");				 Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN",""));		    String USER_ID			= "";		    if(SITE_SESSION.get("USER_ID")==null){		    	USER_ID			= "";		    }else{		    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));		    	param.put("reg_id", USER_ID);		    }		    		    		String login_ipns = "";		if(param.get("login_ipns")==null){			login_ipns = "";		}else{			login_ipns = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("login_ipns"),""));		}				String user_id = "";		if(param.get("user_id")==null){			user_id = "";		}else{			user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_id"),""));		}				String sorg_cd = "";		if(param.get("sorg_cd")==null){			sorg_cd = "";		}else{			sorg_cd = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("sorg_cd"),""));		}				String user_email1 = "";		if(param.get("user_email1")==null){			user_email1 = "";		}else{			user_email1 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email1"),""));		}				String user_email2 = "";		if(param.get("user_email2")==null){			user_email2 = "";		}else{			user_email2 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email2"),""));		}				String user_email="";		    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();			    int max_seq = 0;	    String sql_id="";		try{						// 아이디 중복을 체크한다			if(!user_id.equals("")){				sql_id = "JiCmOam.getAdminChk";				query_param = new HashMap();				query_param.put("user_id",user_id);				//				if((Integer)getSqlMapClientTemplate().queryForObject(sql, query_param) > 0){				if(getInt(sql_id, query_param) > 0){									throw new JSysException("중복된 아이디입니다.");									}								if(user_id.length() > 12){					throw new JSysException("필수입력값이 조건에 맞지 않습니다.");				}			}else{				throw new JSysException("필수입력값이 입력되지 않았습니다.");			}						if(sorg_cd.equals("") || sorg_cd.length() > 10){				throw new JSysException("필수입력값이 조건에 맞지 않습니다.");			}						if(!user_email2.equals("")){				if(user_email2.equals("직접입력")){					user_email = user_email1;				}else{					user_email = user_email1+"@"+user_email2;				}				param.put("email", user_email);			}else{				param.put("email", "");			}									//일련번호 추출			max_seq = cmDAO.getTableMaxSeq("JIT9120","USER_SEQNO","");			param.put("max_seq", max_seq);									//비밀번호가 입력되어있으면 암호화한다			if(!login_ipns.equals("")){				// db암호화 적용				//param.put("login_ipns", JasyptUtil.encSHA256(login_ipns));				param.put("login_ipns", login_ipns);				//param.put("login_passwd", encData);							// 비밀번호가 입력되어있지 않으면 프로퍼티에 지정된 비밀번호로 초기화한다			}else{				// db암호화 적용				//param.put("login_ipns", JasyptUtil.encSHA256(propertiesService.getString("INIT_LOGINPASS")));				param.put("login_ipns", user_id+"^%$");			}									log.debug("======= insertCMOAM ==== param ==== "+param);			sql_id="JiCmOam.insertAdmin";			insert(sql_id, param);									result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== insertCMOAM : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map updateCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== updateCMOAM : START ===="+param);		Map result_map = new HashMap();				 Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN",""));		    String USER_ID			= "";		    if(SITE_SESSION.get("USER_ID")==null){		    	USER_ID			= "";		    }else{		    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));		    	param.put("reg_id", USER_ID);		    }		    		    		String login_ipns = "";		if(param.get("login_ipns")==null){			login_ipns = "";		}else{			login_ipns = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("login_ipns"),""));		}				String user_id = "";		if(param.get("user_id")==null){			user_id = "";		}else{			user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_id"),""));		}				String sorg_cd = "";		if(param.get("sorg_cd")==null){			sorg_cd = "";		}else{			sorg_cd = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("sorg_cd"),""));		}				String user_email1 = "";		if(param.get("user_email1")==null){			user_email1 = "";		}else{			user_email1 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email1"),""));		}				String user_email2 = "";		if(param.get("user_email2")==null){			user_email2 = "";		}else{			user_email2 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email2"),""));		}				String user_email="";				String suser_seq = "";		if(param.get("suser_seq")==null){			suser_seq = "";		}else{			suser_seq = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_seq"),""));		}				String sql_id="JiCmOam.updateAdmin";	    	    try{							if(sorg_cd.equals("") || sorg_cd.length() > 10){				throw new JSysException("필수입력값이 조건에 맞지 않습니다.");			}							if(suser_seq.equals("") || suser_seq.length() > 10){				throw new JSysException("필수입력값이 조건에 맞지 않습니다.");			}						if(!user_email2.equals("")){				if(user_email2.equals("직접입력")){					user_email = user_email1;				}else{					user_email = user_email1+"@"+user_email2;				}				param.put("email", user_email);			}else{				param.put("email", "");			}									// 등록자 id 셋팅			param.put("mod_id", USER_ID);						//비밀번호가 입력되어있으면 암호화한다			if(!login_ipns.equals("")){				// db암호화 적용				//param.put("login_passwd", JasyptUtil.encSHA256(login_passwd));				param.put("login_passwd", login_ipns);			}									//사용자기본정보 저장			update(sql_id, param);						result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== updateCMOAM : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map updateCMOAM3(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== updateCMOAM3 : START ===="+param);		Map result_map = new HashMap();			    Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));						String sql_id="JiCmOam.updateAdmin3";	    	    try{		    							if(USER_ID.equals("") || USER_ID.length() > 10){				throw new JSysException("로그인정보를 확인해주세요.");			}						// 등록자 id 셋팅			param.put("mod_id", USER_ID);						//사용자기본정보 저장			update(sql_id, param);						result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== updateCMOAM : END ====");		return result_map;		}				/**	* <p> ctlACD(메인Dao컨트롤클래스)에서 해당데이터를 삭제하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map deleteCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== deleteCMOAM : START ====");		Map result_map = new HashMap();	    Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));			    // 등록자 id 셋팅		try{						param.put("user_id", USER_ID);			delete("JiCmOam.deleteAdmin", param);				    	result_map.put("result", true);	    			}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== deleteCMOAM : END ====");		return result_map;		}     	/**	* <p> 비밀번호 초기화 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	* @throws JSysException 	* @throws  	*/		public Map initPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initPass 		log.debug("==== initPass : START ====");		Map result_map = new HashMap();		try{			String suser_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_id"),""));//수신자 아이디			String suser_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_nm"),""));//수신자 명			String suser_email = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_email"),""));//수신자 이메일						//비밀번호 랜덤생성해서 업데이트 (사용하지 않음)			String password = StringUtil.getRandomPassword(10);			//log.debug("======== CmOamDAO02 ctlCMS PU password ========"+password);			// db암호화 적용			//param.put("login_passwd", JasyptUtil.encSHA256(password));			param.put("login_passwd", suser_id+"^%$");			update("JiCmOam.updateLoginIpnsAdm", param);						//임시비밀번호 이메일로 발송			Map param_email = new HashMap();			String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템			String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));	//			String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다			String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일						String mailto = suser_email;			String mailto_nm = suser_nm+"님";			String rname = "관리자";						String subject = "["+system_name+"] 관리자 임시비밀번호 입니다.";			String emailTitle = "["+system_name+"] 임시비밀번호입니다.";			String emailContent = suser_nm+"님의 임시비밀번호는<br/><b>"+password+"</b> 입니다<br>로그인후 비밀번호를 변경해주시기 바랍니다.";									emailForm = emailForm.replace("{제목}", emailTitle);			emailForm = emailForm.replace("{내용}", emailContent);												param_email.put("subject", subject);							//제목			param_email.put("mailfrom", "\""+gubun+"\"<"+mailFrom+">");		//발송자이메일			param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일			param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***			param_email.put("gubun", gubun);								//발송시스템명			param_email.put("rname", rname);								//담당자명			param_email.put("content", emailForm);							//내용			//if(!HtmlTag.returnString(mailto,"").equals("")){ 				//sendEmail.start(param_email);								result_map.put("result", true);				//result_map.put("TRS_MSG", "임시비밀번호가 이메일로 발송되었습니다.");					result_map.put("TRS_MSG", "비밀번호가 초기화되었습니다.");			//}else{			//	result_map.put("result", false);			//	result_map.put("TRS_MSG", "메일정보가 정확하지 않습니다.");							//}								}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB NullPointerException:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB ArrayIndexOutOfBoundsException:");				}catch(Exception q){			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initPass : END ====");		return result_map;		}   		/**	* <p> 비밀번호 초기화 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map initAllPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initAllPass 		log.debug("==== initAllPass : START ====");		Map result_map = new HashMap();		Map tmp_map = new HashMap();		List init_list = new ArrayList();		String initpass = "";	    String sql = "";		    		 Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		 String USER_ID ="";		    if(SITE_ADM_SESSION!=null){		    	USER_ID	= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		    	param.put("reg_id", USER_ID);		    }	    		try{						// 전체 사용자 정보를 불러온다			init_list = cmDAO.getListSqlOnly (param,"JiCmOam.selectOrgAdminListInit");			sql = "JiCmOam.initAllAdminPass";			if(init_list!=null){				for(int i=0;i<init_list.size();i++){					tmp_map = (Map)init_list.get(i);					//initpass = HtmlTag.returnString((String)tmp_map.get("user_id"),"")+HtmlTag.returnString((String)param.get("curdate"),"")+"^%$";					initpass = HtmlTag.returnString((String)tmp_map.get("user_id"),"")+"^%$";					// 암호화 적용					// db암호화 적용					//initpass = JasyptUtil.encSHA256(initpass);						initpass = initpass;					param.put("initpass",initpass);					param.put("user_id",HtmlTag.returnString((String)tmp_map.get("user_id"),""));										update(sql, param);													}							}				    	result_map.put("result", true);		}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(Exception q){			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initPass : END ====");		return result_map;		} 		/**	* <p> 비밀번호 변경 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map changePass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== changePass : START ====");		Map result_map = new HashMap();				Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		String USER_ID		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		String pass	= HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("pass"),""));			    String sql = "";			try{						param.put("user_id", USER_ID);			// db암호화 적용			//param.put("login_passwd", JasyptUtil.encSHA256(pass));						//복잡도 증가			//패스워드 정규식체크	    	String pwdPattern = "^(?=.*[A-Za-z])(?=.*[0-9])(?=.*[$@$!%*#?&_])[A-Za-z[0-9]$@$!%*#?&_]{9,12}$";//	    	String pwdPattern = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{9,12}$";	    	boolean pwdCheck = Pattern.matches(pwdPattern, pass);	    		    	if(!pwdCheck){ 	    		throw new JSysException("비밀번호는 영문,숫자,특수문자 조합으로 9~12자리로 사용해야합니다.");	    	}						param.put("login_passwd", pass);						// 비밀번호확인			sql = "JiCmOam.changepass";						update(sql, param);		    	result_map.put("result", true);	    	SITE_ADM_SESSION.put("CHGYMD","N"); // 3개월 변경			}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","비밀번호변경중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("changePass Exception:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","비밀번호변경중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("changePass Exception:");				}catch(Exception q){			result_map.put("TRS_MSG","비밀번호변경중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("changePass Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== changePass : END ====");		return result_map;		}    				/**	* <p> 로그인 실패횟수 초기화 </p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map initLogCnt(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initLogCnt 		log.debug("==== initLogCnt : START ====");		Map result_map = new HashMap();	    String sql = "";			try{			// password 초기화 추후 구현			sql = "JiCmOam.initAdminLogCnt";			update(sql, param);		    	result_map.put("result", true);		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initLogCnt : END ====");		return result_map;		}    		/**	* <p> 유저 가입 승인 </p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map joinUser(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO joinUser 		log.debug("==== joinUser : START ====");		Map result_map = new HashMap();	    String sql = "";			try{			// password 초기화 추후 구현			sql = "JiCmOam.joinAdmin";			update(sql, param);		    	result_map.put("result", true);		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== joinUser : END ====");		return result_map;		}    			/*비밀번호 변경시 비밀번호 확인*/	public Map checkPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== checkPass : START ====");		Map result_map = new HashMap();				// 등록자 id 셋팅		Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		String USER_ID		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		String login_passwd		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("login_passwd"),""));			    String sql = "";	    List rtn_list = new ArrayList();	    		try{			// 현재비밀번호 확인			param.put("USER_ID",USER_ID);			sql = "JiCmOam.checkpass";						param.put("user_id", USER_ID);			// db암호화 적용			//param.put("login_passwd", JasyptUtil.encSHA256(login_passwd));			param.put("login_passwd", login_passwd);						rtn_list = list(sql, param);			if(rtn_list.size() < 1){				log.debug("비밀번호가 틀림!!");				result_map.put("result",false);			}else{				result_map.put("result", true);			}		}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","비밀번호 확인중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("checkPass NullPointerException:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","비밀번호 확인중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("checkPass ArrayIndexOutOfBoundsException:");				}catch(Exception q){			result_map.put("TRS_MSG","비밀번호 확인중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("checkPass Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== checkPass : END ====");		return result_map;		}  			/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertJIT9120_UPDATEJob	public Map insertJIT9120_UPDATEJob(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.error("==== CmOamDAO02 insertJIT9120_UPDATEJob : START ====");				    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();		List rtn_list = new ArrayList();				int i = 0;   	    String sql_id="";	    String initipns = "";		try{			sql_id="JiCmOam.insertJIT9110_UPDATEJob";			getSqlMapClientTemplate().queryForObject(sql_id, param);						sql_id="JiCmOam.insertJIT9120_UPDATEJob";			getSqlMapClientTemplate().queryForObject(sql_id, param);			//select(sql_id, param);										result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.error("insertJIT9120_UPDATEJob throw JSysException >>>>> :  "+q);				throw q;				}catch(NullPointerException q){			log.error("insertJIT9120_UPDATEJob NullPointerException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.error("insertJIT9120_UPDATEJob ArrayIndexOutOfBoundsException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.error("insertJIT9120_UPDATEJob JSysException Exception >>>>> :  "+q);				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.error("==== CmOamDAO02 insertJIT9120_UPDATEJob : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertJWCMS	public Map insertJWCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== CmOamDAO02 insertJWCMS : START ====");			    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();		List rtn_list = new ArrayList();				int i = 0;   	    String sql_id="";	    String initipns = "";		try{						rtn_map = param;						// 조직정보			rtn_list = (List)rtn_map.get("ListV_DEPO_INFO");						for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				log.debug("JiCmOam.insertJIT9110====>"+query_param);												sql_id = "JiCmOam.getJIT9110Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9110_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9110_2";					insert(sql_id, query_param);									}			}															// 사원정보			rtn_list = (List)rtn_map.get("ListV_EMPL_INFO");						for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);												initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";				//log.debug("JiCmOam.insertJIT9111====>initipns::"+initipns);				// 암호화 적용				// db암호화적용				//initipns = JasyptUtil.encSHA256(initipns);				query_param.put("loginIpns", initipns);				//log.debug("JiCmOam.insertJIT9111====>initipns::"+query_param.get("loginIpns"));								log.debug("JiCmOam.insertJIT9111====>"+query_param);								sql_id = "JiCmOam.getJIT9111Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9111_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9111_2";					insert(sql_id, query_param);									}							}									// 회원사 정보			rtn_list = (List)rtn_map.get("ListV_AME_INFO");				for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";								// 암호화 적용				// db암호화 적용				//initipns = JasyptUtil.encSHA256(initipns);				query_param.put("login_ipns", initipns);				query_param.put("orgCd", "0026");												log.debug("JiCmOam.insertJIT9111====>"+query_param);								sql_id = "JiCmOam.getJIT9111Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9111_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9111_2";					insert(sql_id, query_param);									}			}												result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.debug("insertMsisJob throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("insertMsisJob NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("insertMsisJob ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("insertMsisJob JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== CmOamDAO02 insertJWCMS : END ====");		return result_map;		}}