package com.ji.dao.cm.oam;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import javax.annotation.Resource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ibatis.sqlmap.client.SqlMapClient;import com.ji.cm.CM_Util;import com.ji.cm.MailMgr;import com.ji.cm.SendEmail;import com.ji.cm.SendSms;import com.ji.dao.cm.CMDAO;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.common.DateUtility;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.common.JasyptUtil;import com.ji.common.StringUtil;import egovframework.rte.fdl.property.EgovPropertyService;/**  * @Class Name : cmOamDAO05.java * @Description : cmOamDAO05 DAO Class  * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2015.03.20           최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2015.03.20 * @version 1.0 * @see *  */@Repository("cmOamDAO05")public class CmOamDAO05 extends CmsDsDao {	protected Logger log = Logger.getLogger(CmOamDAO05.class); //현재 클래스 이름을 Logger에 등록	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;        /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;          /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;	    	/** cmDAO */    @Resource(name="cmOamDAO01")    private CmOamDAO01 cmOamDAO01;          /** sendEmail */    @Resource(name="sendEmail")    private SendEmail sendEmail;	//메일발송 DB 개발서버        /** mailMgr */    @Resource(name="mailMgr")    private MailMgr mailMgr;	//메일발송            /** sendSms */    @Resource(name="sendSms")    private SendSms sendSms;		//문자발송        /** jasyptUtil */    @Resource(name = "jasyptUtil")    private JasyptUtil JasyptUtil;            @Resource(name = "sqlMapClient")    private SqlMapClient sqlMapClient;        /**	 * 사용자관리 메소드	 * @param Map	 * @return Map	 * @exception Exception	 */    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {		//	TODO ctlCMS		log.debug("==== ctlCMS Start ====");		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");		try{			log.debug("==== pstate ====::"+pstate);			if(pstate.equals("L")){						// 인력정보 LIST			}else if(pstate.equals("XL1")){ //ajax jqGrid data관련								result_map = cmDAO.selectListGrid(param, "JiCmOam.selectOrgSawonList");				//list("JiCmOam.selectOrgSawonList", param);											// 등록화면			}else if(pstate.equals("CF")){				result_map.put("tel_cd_opts",cmDAO.bizMakeOptionListText("M00008", ""));	//전화번호				result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//메일주소			// 수정화면			}else if(pstate.equals("UF")){								param.put("file_menu_cd", "000138");	//첨부파일								result_map = cmDAO.getformData(param, "JiCmOam.selectOrgSawonList");				result_map.put("tel_cd_opts",cmDAO.bizMakeOptionListText("M00008", ""));	//전화번호				result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//메일주소												// 첨부파일 목록				//String user_seqno = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_seq")));				//param.put("user_seqno", user_seqno);				//param.put("file_menu_cd", "000138");				//result_map.put("fileList", list("JiMyMyp.selectFileList", param));	//첨부파일 세팅			// 등록			}else if(pstate.equals("C") || pstate.equals("C1")){					result_map = insertCMOAM(param);								// 수정			}else if(pstate.equals("U")){				result_map = updateCMOAM(param);			// 삭제			}else if(pstate.equals("D")){				result_map = deleteCMOAM(param);							//비밀번호 초기화			}else if(pstate.equals("PU")){				result_map = initPass(param);							//로그인실패횟수초기화			}else if(pstate.equals("PU1")){				result_map = initLogCnt(param);							//가입승인			}else if(pstate.equals("PU2")){				result_map = joinUser(param);							// 비밀번호 변경시 비밀번호 확인			}else if(pstate.equals("P3")){				result_map = checkPass(param);							// 비밀번호 변경			}else if(pstate.equals("P4")){				result_map = changePass(param);				// 전체 비밀번호 초기화			}else if(pstate.equals("PU5")){				result_map = initAllPass(param);											// 인사, 조직, 회원사정보 강제연계			}else if(pstate.equals("PU6")){				result_map = insertMsisJob(param);						//아이디 중복체크			}else if(pstate.equals("CK")){				int cnt = (Integer) sqlMapClient.queryForObject("JiCmOam.getCheckUserId", param);				result_map.put("cnt", String.valueOf(cnt));//				result_map = getSelectByPk("JiCmOam.getCheckUserId", param);							//운영 SMS 테스트			}else if(pstate.equals("TSMS")){				log.debug("==== pstate TSMS ====::"+pstate);				String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));				String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");				String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));								String mailto_id = HtmlTag.returnString((String)param.get("tsend_mail_id"),"010-2953-6078");				String callback_id = "070-7511-1114";				param.put("tran_phone", mailto_id.replaceAll("-", ""));	//수신번호(숫자만)				param.put("tran_callback", callback_id.replaceAll("-", ""));	//발송번호				param.put("tran_msg", "[개발]SMS발송테스트");		//내용				param.put("tran_etc1", gubun+"");		//발송시스템명				param.put("tran_etc2", HtmlTag.returnString((String) param.get("pcode"),""));		// board_cd				param.put("tran_etc3", "1");		// board_seq				param.put("tran_etc4", HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"").replaceAll("/", "")+"");		//발송시스템				log.debug("==== sms TSMS param ====::"+param);				if(!HtmlTag.returnString((String)param.get("tran_phone"),"").equals("")){ 					result_map = sendSms.start(param);					}else{					result_map.put("result", false);				}				result_map.put("TRS_MSG", "");							//운영 메일 테스트			}else if(pstate.equals("TEMAIL")){						log.error("==== pstate TSMS ====::"+pstate);				// 실운영인경우 메일을 보낸다				Map mailsend_map = new HashMap();				    			//mailsend_map.put("mailTo", "snisys@snisystem.co.kr");    			//mailsend_map.put("mailToName", "이금용");				    			/*								    			mailsend_map.put("mailTitle", "전력데이터개발포털 운영 확인 메일입니다.");    			    			mailsend_map.put("mailContents", "현재 운영서버에서 발송한 테스트 메일입니다.");    			mailsend_map.put("mailFrom", "admin@komipo.co.kr");    			mailsend_map.put("mailFromName", "관리자");    			    			    			//if(mailMgr.sendJavaMail(mailsend_map)){    			if(mailMgr.sendMail(mailsend_map)){    				        			log.debug("실운영 메일====::"+mailsend_map);        			result_map.put("result", true);    				result_map.put("TRS_MSG", "");        			        		}else{    				log.debug("실운영 메일====::전송실패");    				result_map.put("result", false);    				result_map.put("TRS_MSG", "메일 전송실패");    			} */				String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다				String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다				String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));				String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");				String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));				String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");				String emailSubject = gubun+" 테스트 메일 제목입니다.";				String emailTitle = gubun+" 테스트 메일 타이틀입니다.";				String emailContent = gubun+" 테스트 메일 내용입니다.<br />";						emailContent = emailContent+"랜덤비밀번호 :"+StringUtil.getRandomPassword(10)+"<br />";;										//log.debug("emailForm111==>"+emailForm);					emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",gubun);					emailForm = emailForm.replace("{제목}", emailTitle);					//emailForm = emailForm.replace("{내용}", emailContent);					//log.debug("emailForm222==>"+emailForm);					// 내용 제목과 동일하게 넣어달라는 현업요구 반영					emailForm = emailForm.replace("{내용}", emailContent);										String mailto_id = HtmlTag.returnString((String)param.get("tsend_mail_id"),"kdn00301@komipoptn.co.kr");					String mailto_nm = HtmlTag.returnString((String)param.get("tsend_mail_nm"),"kdn이금용");					Map	emailParam = new HashMap();						emailParam.put("subject", emailSubject);						//제목						emailParam.put("mailfrom", "\""+gubun+"\"<"+mailFrom+">");		//발송자이메일						emailParam.put("mailto", "\""+mailto_nm+"\"<"+mailto_id+">");		//수신자이메일						emailParam.put("sql", "SSV:"+mailto_id);							//***** 실제발송되는 이메일 *****						emailParam.put("gubun", gubun);									//발송시스템명						emailParam.put("rname", gubun);		//담당자명												emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"																		,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/cmsmain.do?scode=S01&pcode=000484&pstate=R&prod_seq="+param.get("ikey_datas")).replaceAll("\\{시스템nm}",gubun));						//log.debug("emailForm333==>"+emailForm);						emailParam.put("content", emailForm);							//내용												emailParam.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));						emailParam.put("MENU_DATA_KEY", "0");						emailParam.put("ORDER_NO", "1");						emailParam.put("REG_ID", CM_ADMIN_DEFAULT_ID);						emailParam.put("FR_MAIL", HtmlTag.returnString((String) emailParam.get("mailfrom"),""));						emailParam.put("TO_MAIL", HtmlTag.returnString((String) emailParam.get("mailto"),""));						emailParam.put("TO_USER_ID", "");						emailParam.put("TO_USER_TY", "9");						    			log.error("mail 1==>"+emailParam);    			if(!mailto_id.equals("")){     				result_map = sendEmail.start(emailParam);    			}    			 			    			    			//if(mailMgr.sendJavaMail(mailsend_map)){    			/*if(mailMgr.sendMail(mailsend_map)){        			log.debug("실운영 메일====::"+mailsend_map);        			result_map.put("result", true);    				result_map.put("TRS_MSG", "");        			        		}else{    				log.debug("실운영 메일====::전송실패");    				result_map.put("result", false);    				result_map.put("TRS_MSG", "메일 전송실패");    			}*/       			log.error("==== pstate TSMS END====::"+pstate);    													}		}catch(JSysException q){				log.error("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.error("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.error("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.error("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}		    	log.debug("==== ctlCMS End ====");		return result_map;    }    	/**	* <p> 인력정보 ID 및 password 생성시 prefix 값 추줄</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* Postcondition: 조회 결과를 리턴한다 	*	* @param   TabName		String		테이블명	* @param   ColName		String		컬럼명	* @param   WhereStr		String		where조건	* @param   ColLen		int			컬럼길이	* 	* @return  	 * @throws ISPException 	* @throws  	*/	public String getprefix(String org_cd) throws Exception {		String sql = "cmOamDAO.getprefix";			Map param = new HashMap();		param.put("org_cd", org_cd);		List list = new ArrayList();			list =  list(sql, param);			return (String) list.get(0);	}	        		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertCMOAM	public Map insertCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== insertCMOAM : START ====");				 Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		    String USER_ID ="";		    if(SITE_ADM_SESSION!=null){		    	USER_ID	= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		    	param.put("reg_id", USER_ID);		    }		    		String login_passwd = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("login_passwd"),""));		String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_id"),""));		String user_email1 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email1"),""));		String user_email2 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email2"),""));		String user_email="";		    		Map result_map = new HashMap();		Map query_param = new HashMap();			    int max_seq = 0;   	    String sql_id="";		try{						// 아이디 중복을 체크한다			if(!user_id.equals("")){				sql_id = "JiCmOam.getUserChk";				query_param = new HashMap();				query_param.put("user_id",user_id);								if(getInt(sql_id, query_param) > 0){									throw new JSysException("중복된 아이디입니다.");									}								if(user_id.length() > 12){					throw new JSysException("필수입력값이 조건에 맞지 않습니다.");				}			}else{				throw new JSysException("필수입력값이 입력되지 않았습니다.");			}						if(!user_email2.equals("")){				if(user_email2.equals("직접입력")){					user_email = user_email1;				}else{					user_email = user_email1+"@"+user_email2;				}				param.put("user_email", user_email);			}else{				param.put("user_email", "");			}						//일련번호 추출			max_seq = cmDAO.getTableMaxSeq("JIT9111","USER_SEQNO","");			param.put("user_seqno", max_seq);						param.put("max_seq", max_seq);						//비밀번호가 입력되어있으면 암호화한다			if(!login_passwd.equals("")){				param.put("login_passwd", login_passwd);			// 비밀번호가 입력되어있지 않으면 프로퍼티에 지정된 비밀번호로 초기화한다			}else{				// db암호화 적용				//param.put("login_passwd", JasyptUtil.encSHA256(propertiesService.getString("INIT_LOGINPASS")));				param.put("login_passwd", propertiesService.getString("INIT_LOGINPASS"));			}						param.put("join_yn", "Y");			param.put("prv_agree1", "N");			param.put("prv_agree2", "N");			param.put("prv_agree3", "N");			param.put("prv_agree4", "N");			sql_id="JiCmOam.insertUserInfo";			insert(sql_id, param);						result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== insertCMOAM : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map updateCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== insertCMOAM : START ====");		Map result_map = new HashMap();	    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		String login_passwd = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("login_passwd"),""));		String suser_seq = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_seq"),""));		String user_email1 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email1"),""));		String user_email2 = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("user_email2"),""));	    String sql_id="JiCmOam.updateUserInfo";	    		try{						if(suser_seq.equals("") || suser_seq.length() > 10){				throw new JSysException("필수입력값이 조건에 맞지 않습니다.");			}									// 등록자 id 셋팅			param.put("mod_id", USER_ID);						//비밀번호가 입력되어있으면 암호화한다			if(!login_passwd.equals("")){				String dd = DateUtility.getCurrentDateTime("yyyyMMdd");				param.put("login_passwd", login_passwd);			}								if(!user_email1.equals("")){				if(user_email2.equals("직접입력")){					param.put("user_email", user_email1);				}else{					param.put("user_email", user_email1+"@"+user_email2);				}							}			//사용자기본정보 저장			update(sql_id, param);							result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){			log.debug("throw JSysException >>>>> :  ");			throw q;		}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== insertMPGRI : END ====");		return result_map;		}				/**	* <p> ctlACD(메인Dao컨트롤클래스)에서 해당데이터를 삭제하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map deleteCMOAM(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== deleteCMOAM : START ====");		Map result_map = new HashMap();	    Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));			    // 등록자 id 셋팅		try{						param.put("user_id", USER_ID);			param.put("suser_id", USER_ID);			delete("JiCmOam.deleteUser", param);				    	result_map.put("result", true);		}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== deleteCMOAM : END ====");		return result_map;		}     	/**	* <p> 비밀번호 초기화 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map initPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initPass 		log.debug("==== initPass : START ====");		Map result_map = new HashMap();			try{			// password 초기화 추후 구현			// 프로퍼티에 있는 비밀번호로 초기화			//String initpass = propertiesService.getString("INIT_LOGINPASS");			// 초기화 비밀번호 생성규칙 user_id+"초기화일자(YYYYMMDD)"+"^%$"			//String initpass = HtmlTag.returnString((String)param.get("suser_id"),"")+HtmlTag.returnString((String)param.get("curdate"),"")+"^%$";						// 암호화 적용			//initpass = JasyptUtil.encSHA256(initpass);//			param.put("initpass",initpass);//			sql = "JiCmOam.initpass";//			update(sql, param);	//	    	result_map.put("result", true);									String suser_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_nm"),""));			String suser_email = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("suser_email"),""));						//비밀번호 랜덤생성해서 업데이트			String password = StringUtil.getRandomPassword(10);			log.debug("======== CmOamDAO05 ctlCMS PU password ========"+password);			// db암호화로 변경			//param.put("login_passwd", JasyptUtil.encSHA256(password));			param.put("login_passwd", password);			update("JiCmOam.updateLoginIpnsAdmUser", param);						//임시비밀번호 이메일로 발송			Map param_email = new HashMap();			String subject = "[전력데이터 개방 포털시스템] 임시비밀번호 입니다.";			String mailfrom = "edportal@kepco.co.kr";			String mailto = suser_email;			String mailto_nm = suser_nm+"님";			String gubun = propertiesService.getString("SYSTEM_NAME");			String rname = "관리자";			String content = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>";			content = content+"<html xmlns='http://www.w3.org/1999/xhtml'>";			content = content+"<head>";			content = content+"	<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />";			content = content+"	<title>전력데이터 개방 포털시스템</title>";			content = content+"</head>";			content = content+"<body>";			content = content+"<div style='width:720px; padding:0; margin:0; font-family:Nanum Gothic; color:#333; border-left:1px solid #e0e0e0; border-right:1px solid #e0e0e0;'>";			content = content+"		<div style='background:url(http://le48.kepco.co.kr:10100/images/header_bg.jpg) no-repeat; width:100%; height:222px; padding:0; margin:0;'>";			content = content+"			<p style='padding:0; margin:0;font-size:12px; padding-top:30px; padding-right:35px;'></p>";			content = content+"			<h2 style='padding:0; margin:0; color:#333; font-size:26px; padding-top:60px; padding-left:30px; line-height:34px; font-weight:bold;'>";			content = content+"			전력데이터 개방 포털시스템<br />임시비밀번호입니다.</h2>";			content = content+"		</div>";			content = content+"		<div style='text-align:left; padding-left:30px; width:100%; margin-top:30px; font-size:14px; line-height:22px;'>";			content = content+"			{성명}님의 임시비밀번호는<br/>";			content = content+"			<b>{패스워드}</b> 입니다<br>";			content = content+"			로그인후 비밀번호를 변경해주시기 바랍니다.";			content = content+"		</div>";			content = content+"		<div style='background:#e0e0e0; color:#666; width:100%; padding:30px 0; margin:0; margin-top:50px; text-align:center;'>";			content = content+"			<p style='padding:0; margin:0; font-size:12px; line-height:20px;'>COPYRIGHTⓒ2018 한국전력공사 전력데이터 개방 포털시스템. ALL RIGHTS RESERVED.</p>";			content = content+"		</div>";			content = content+"</div>";			content = content+"</body>";			content = content+"</html>";			content = content.replace("{성명}", suser_nm);			content = content.replace("{패스워드}", password);						param_email.put("subject", subject);							//제목			param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일			param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일			param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***			param_email.put("gubun", gubun);								//발송시스템명			param_email.put("rname", rname);								//담당자명			param_email.put("content", content);							//내용			if(!HtmlTag.returnString(mailto,"").equals("")){				sendEmail.start(param_email);							result_map.put("result", true);				result_map.put("TRS_MSG", "임시비밀번호가 이메일로 발송되었습니다.");			}else{												result_map.put("result", false);				result_map.put("TRS_MSG", "이메일주소가 정확하지 않아 메일발송에 실패했습니다.");							}								}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB NullPointerException:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB ArrayIndexOutOfBoundsException:");				}catch(Exception q){			result_map.put("TRS_MSG","에러가 발생했습니다 담당자에게 문의하시기 바랍니다.");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initPass : END ====");		return result_map;		}   		/**	* <p> 비밀번호 초기화 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map initAllPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initAllPass 		log.debug("==== initAllPass : START ====");		Map result_map = new HashMap();		Map tmp_map = new HashMap();		List init_list = new ArrayList();		String initpass = "";	    String sql = "";		    		 Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		 String USER_ID ="";		    if(SITE_ADM_SESSION!=null){		    	USER_ID	= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		    	param.put("reg_id", USER_ID);		    }	    		try{						// 전체 사용자 정보를 불러온다			init_list = cmDAO.getListSqlOnly (param,"JiCmOam.selectOrgSawonListInit");			sql = "JiCmOam.initAllpass";			if(init_list!=null){				for(int i=0;i<init_list.size();i++){					tmp_map = (Map)init_list.get(i);					initpass = HtmlTag.returnString((String)tmp_map.get("user_id"),"")+HtmlTag.returnString((String)param.get("curdate"),"")+"^%$";					// 암호화 적용					// db암호화 적용					//initpass = JasyptUtil.encSHA256(initpass);						param.put("initpass",initpass);					param.put("user_id",HtmlTag.returnString((String)tmp_map.get("user_id"),""));										update(sql, param);													}							}		    	result_map.put("result", true);		}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(Exception q){			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initPass : END ====");		return result_map;		} 		/**	* <p> 비밀번호 초기화 메서드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map changePass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== changePass : START ====");		Map result_map = new HashMap();				  Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		  String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		    	    String sql = "";			try{						param.put("USER_ID", USER_ID);			// password 초기화 추후 구현			sql = "cmOamDAO.changepass";						update(sql, param);		    	result_map.put("result", true);	    	SITE_ADM_SESSION.put("CHGYMD","N"); // 3개월 변경			}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(Exception q){			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== changePass : END ====");		return result_map;		}    				/**	* <p> 로그인 실패횟수 초기화 </p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map initLogCnt(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO initLogCnt 		log.debug("==== initLogCnt : START ====");		Map result_map = new HashMap();	    String sql = "";			try{			// password 초기화 추후 구현			sql = "JiCmOam.initLogCnt";			update(sql, param);		    	result_map.put("result", true);		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== initLogCnt : END ====");		return result_map;		}    		/**	* <p> 유저 가입 승인 </p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  삭제 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map joinUser(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO joinUser 		log.debug("==== joinUser : START ====");		Map result_map = new HashMap();	    String sql = "";			try{			// password 초기화 추후 구현			sql = "JiCmOam.joinUser";			update(sql, param);		    	result_map.put("result", true);		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== joinUser : END ====");		return result_map;		}    				public Map checkPass(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		//	TODO deleteCMOAM 		log.debug("==== checkPass : START ====");		Map result_map = new HashMap();				  Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		  String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));				// 등록자 id 셋팅	    String sql = "";	    List rtn_list = new ArrayList();		try{			// password 초기화 추후 구현			param.put("USER_ID",USER_ID);			sql = "cmOamDAO.checkpass";						rtn_list = list(sql, param);			if(rtn_list.size() < 1){				log.debug("비밀번호가 틀림!!");				result_map.put("result",false);			}else{				result_map.put("result", true);			}		}catch(NullPointerException q){			log.debug("NullPointerException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");				}catch(Exception q){			result_map.put("TRS_MSG","초기화중 에러가 발생했습니다");			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));						log.debug("deleteAB Exception:");					}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== checkPass : END ====");		return result_map;		}  			/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertMsisJob	public Map insertMsisJob(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== CmOamDAO02 insertMsisJob : START ====");				    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();		List rtn_list = new ArrayList();				int i = 0;   	    String sql_id="";	    String initipns = "";		try{			//			rtn_map = cmMsisService.insertMsisJob(param);			//			insertJWCMS(rtn_map);			// 조직정보			/*rtn_list = (List)rtn_map.get("ListV_DEPO_INFO");			sql_id="JiCmOam.insertJIT9110";			for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				log.debug("JiCmOam.insertJIT9110====>"+query_param);				insert(sql_id, query_param);			}												// 사원정보			rtn_list = (List)rtn_map.get("ListV_EMPL_INFO");			sql_id="JiCmOam.insertJIT9111";			for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";				//log.debug("JiCmOam.insertJIT9111====>initipns::"+initipns);				// 암호화 적용				initipns = JasyptUtil.encSHA256(initipns);				query_param.put("loginIpns", initipns);				//log.debug("JiCmOam.insertJIT9111====>initipns::"+query_param.get("loginIpns"));								log.debug("JiCmOam.insertJIT9111====>"+query_param);				insert(sql_id, query_param);			}									// 회원사 정보			rtn_list = (List)rtn_map.get("ListV_AME_INFO");				for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";								// 암호화 적용				initipns = JasyptUtil.encSHA256(initipns);				query_param.put("login_ipns", initipns);				query_param.put("orgCd", "0026");												log.debug("JiCmOam.insertJIT9111====>"+query_param);				insert(sql_id, query_param);			}	*/												result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.debug("insertMsisJob throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("insertMsisJob NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("insertMsisJob ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("insertMsisJob JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== CmOamDAO02 insertMsisJob : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : insertJWCMS	public Map insertJWCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== CmOamDAO02 insertJWCMS : START ====");			    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();		List rtn_list = new ArrayList();				int i = 0;   	    String sql_id="";	    String initipns = "";		try{						rtn_map = param;						// 조직정보			rtn_list = (List)rtn_map.get("ListV_DEPO_INFO");						for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				log.debug("JiCmOam.insertJIT9110====>"+query_param);												sql_id = "JiCmOam.getJIT9110Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9110_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9110_2";					insert(sql_id, query_param);									}			}															// 사원정보			rtn_list = (List)rtn_map.get("ListV_EMPL_INFO");						for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);												initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";				//log.debug("JiCmOam.insertJIT9111====>initipns::"+initipns);				// 암호화 적용				// db암호화적용				//initipns = JasyptUtil.encSHA256(initipns);				query_param.put("loginIpns", initipns);				//log.debug("JiCmOam.insertJIT9111====>initipns::"+query_param.get("loginIpns"));								log.debug("JiCmOam.insertJIT9111====>"+query_param);								sql_id = "JiCmOam.getJIT9111Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9111_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9111_2";					insert(sql_id, query_param);									}							}									// 회원사 정보			rtn_list = (List)rtn_map.get("ListV_AME_INFO");				for(i=0;i<rtn_list.size();i++){								query_param = (Map)rtn_list.get(i);				initipns = HtmlTag.returnString((String)query_param.get("userId"),"")+"#$%";								// 암호화 적용				// db암호화 적용				//initipns = JasyptUtil.encSHA256(initipns);				query_param.put("login_ipns", initipns);				query_param.put("orgCd", "0026");												log.debug("JiCmOam.insertJIT9111====>"+query_param);								sql_id = "JiCmOam.getJIT9111Chk";								// 등록되어있으면 수정				if(getInt(sql_id, query_param) > 0){									sql_id="JiCmOam.updateJIT9111_2";					update(sql_id, query_param);					// 미등록이면 등록				}else{					sql_id="JiCmOam.insertJIT9111_2";					insert(sql_id, query_param);									}			}					result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.debug("insertMsisJob throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("insertMsisJob NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("insertMsisJob ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("insertMsisJob JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== CmOamDAO02 insertJWCMS : END ====");		return result_map;		}}