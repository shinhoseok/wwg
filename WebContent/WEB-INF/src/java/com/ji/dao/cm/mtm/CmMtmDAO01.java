package com.ji.dao.cm.mtm;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ibatis.sqlmap.client.SqlMapClient;import com.ji.dao.cm.CMDAO;import com.ji.dao.op.opn.OpOpnDAO01;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.vo.FileVO;import com.ji.web.MAController;import com.ji.common.FileUtility;import com.ji.common.HtmlTag;import com.ji.common.HtmlText;import com.ji.common.JSysException;import com.ji.common.StringUtil;import egovframework.rte.fdl.property.EgovPropertyService;/**   * @Class Name : CmMtmDAO01.java * @Description : CmMtmDAO01 DAO Class  * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2016.10.26           최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2016.10.26 * @version 1.0 * @see *  */@Repository("cmMtmDAO01")public class CmMtmDAO01 extends CmsDsDao {	protected Logger log = Logger.getLogger(CmMtmDAO01.class); //현재 클래스 이름을 Logger에 등록	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;        /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;          /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;	        @Resource(name="sqlMapClient")	private SqlMapClient sqlClient;    /**	 * 컨트롤 메소드	 * @param Map	 * @return Map	 * @exception Exception	 */    // TODO : ctlCMS    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {		//	TODO ctlCMS		log.debug("====CmMtmDAO01 ctlCMS Start ====");		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");				//log.debug("====CmMtmDAO01 pstate :: "+pstate+"====");		try{						if(pstate.equals("L")){				result_map.put("orgareacd",cmDAO.bizMakeOptionList("99", "")); 			}else if(pstate.equals("X")){ //ajax 파일 정보불러오기				// 기존에 업로드한 데이터가 있는경우만 조회한다				if(!HtmlTag.returnString((String)param.get("iuploadseq"),"").equals("")){					result_map = selectListFilePF1(param);				}							// 파일리스트 조회			}else if(pstate.equals("X1")){ //ajax 파일 정보불러오기				ArrayList<String> arr_pwrplant_cd = HtmlText.iterateQueryParam((String)param.get("menu_cd"));				result_map = cmDAO.selectListGrid(param, "JiCmMtm.getFILElist"); 			// 파일업로드팝업			}else if(pstate.equals("PF1")){					// 기존에 업로드한 데이터가 있는경우만 조회한다				if(!HtmlTag.returnString((String)param.get("iuploadseq"),"").equals("")){					//result_map = selectListFilePF1(param);				}							// 파일업로드처리			}else if(pstate.equals("PX1")){					result_map = InsertFilePX1(param);						// 파일다운로드			}else if(pstate.equals("FILEDOWN")){				log.debug("filedown1== start");				String img_type = HtmlTag.returnString((String)param.get("img_type"),"");				String static_file_nm = HtmlTag.returnString((String)param.get("static_file_nm"),"");				String upd_file_nm = HtmlTag.returnString((String)param.get("upd_file_nm"),"");								Map ViewMap = new HashMap();				Map tempMap = new HashMap();				Map pkMap = new HashMap(); 				Map sugMap = new HashMap(); 					if(!param.get("scode").equals(propertiesService.getString("SYS_ADMIN_CD","sysadm"))){						String codeCheck = "";												if (StringUtil.isEmpty((String)param.get("fpcode"))){							throw new JSysException("비정상적인 접근입니다.");						}else{							codeCheck = (String)param.get("fpcode");						}												/**						 * 000100 중소기업Q&A						 * 000484 K - shop 중소기업 제품관						 * 000115 공지사항						 * 000091 지원사업 공고						 * 000523, 000525 지원사업 아이디어 제안센터						 * 000470, 000191 연구개발(R&D) 아이디어 제안관리						 * 000552, 000553 수출규제 중소기업 피해지원센터						 **/												if(!codeCheck.equals("000484") && !codeCheck.equals("000524")){							if(!codeCheck.equals("000100") 									&& !codeCheck.equals("000115") && !codeCheck.equals("000091") 									&& !codeCheck.equals("000523") && !codeCheck.equals("000525")									&& !codeCheck.equals("000470") && !codeCheck.equals("000191")									&& !codeCheck.equals("000552") && !codeCheck.equals("000553")){								if(pkMap.get("open_yn").equals("N") ){									throw new JSysException("비정상적인 접근입니다."); 								}							}							Map SITE_SESSION = (Map)param.get(propertiesService.getString("SITE_SESSION_FN"));							Map SITE_AUTH_SESSION = (Map)param.get(propertiesService.getString("SITE_AUTH_SESSION_FN"));														//2021.05.04 취약점조치 지원사업공고의 글은 관리자가 작성한 글이 아니면 관리자 혹은 올린 사용자만 다운받을 수 있어야한다. shin							//http://localhost:8080/KomipoWwg/cmsmain.do?scode=000008&pcode=000015&pstate=FILEDOWN&fpcode=000091&sidx=3717&fidx=1							if(codeCheck.equals("000091")) {								FileVO fileVO = new FileVO();								fileVO.setMenuCd(codeCheck);								fileVO.setMenuDataKeyDatas(String.valueOf(param.get("sidx")));								fileVO.setFileOrderNo(Integer.parseInt(String.valueOf(param.get("fidx"))));								FileVO resultVO = (FileVO) sqlClient.queryForObject("JiFile.selectFileDetail", fileVO);								//5038141718 사업자번호 사용자가 올린글일 때								if(resultVO.getRegId().length() == 10) {									if(SITE_SESSION != null){										if(!SITE_SESSION.get("USER_ID").equals(resultVO.getRegId())) {											throw new JSysException("비정상적인 접근입니다.");										}									} else {										throw new JSysException("비정상적인 접근입니다.");									}								}							}														pkMap = getSelectByPkNoEgov("JiCmAbd.getBoardFileDown", param);														String dataSeq = (String) pkMap.get("data_seqno");							String idxCheckNum = String.valueOf(param.get("idxCheck"));							if(param.get("SITE_ADM_SESS") == null ){								if((codeCheck.equals("000100") 										|| codeCheck.equals("000523") 										|| codeCheck.equals("000552") 										|| codeCheck.equals("000470")) 										&& !dataSeq.equals(idxCheckNum)){									 if(pkMap.get("open_yn").equals("N") ){										 throw new JSysException("비정상적인 접근입니다.");									 }								}							}														//로그인 혹은 본인인증 작성자 확인							String USER_ID = "";							if(SITE_SESSION != null){						    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));						    }else if(SITE_AUTH_SESSION != null){						    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_AUTH_SESSION.get("USER_ID"),""));						    }						}	   			    /*					 * 20180502					 * 임시 정적 Rss파일 및 qrCode 다운로드 필터추가					 * 업무정의후 변경 및 삭제 진행예정					*/ 				if(img_type.equals("static_file") || img_type.equals("static_rss") || img_type.equals("static_qrCode")){					//고정파일 다운로드					log.debug(img_type+"=======>static_file_nm==>"+static_file_nm+":::"+static_file_nm.replaceAll("\\.\\.", ""));					 					ViewMap.put("file_seqno","0"); 					ViewMap.put("menu_cd","0"); 					ViewMap.put("menu_data_key_datas","0"); 					ViewMap.put("file_nm",""+static_file_nm.replaceAll("\\.\\.", "").replaceAll("/", "")); 					ViewMap.put("update_file_nm",""+upd_file_nm.replaceAll("\\.\\.", "").replaceAll("/", "")); 					ViewMap.put("file_order_no","0"); 					ViewMap.put("file_size","0"); 					ViewMap.put("regst_ymd","0");  					 					log.debug(img_type+"=======>ViewMap file_nm==>"+ViewMap.get("file_nm")+":::"+static_file_nm+":::"+static_file_nm.replaceAll("..", "")); 					result_map.put("ViewMap", ViewMap);										}				}									// 다운로드할 파일 정보 				result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN2");				//첨부파일 카운트 증가				tempMap = (Map)result_map.get("ViewMap");				insert("JiCmMtm.insertFILE_CNT", tempMap);				//update("JiCmMtm.updateFILE_CNT", tempMap);						// 파일다운로드 - 파일명 - kss추가함 2015.08.05			// 목록에서 다운받을 경우			}else if(pstate.equals("FILEDOWN2")){				log.debug("filedown2== start"); //				Map siteSession = (Map) param.get("SITE_ADM_SESS"); 				Map SITE_ADM_SESSION = (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));				if(!(param.get("scode").equals(propertiesService.getString("SYS_ADMIN_CD","sysadm")))						&& !(propertiesService.getString("SYS_ADMIN_CD","sysadm").equals(SITE_ADM_SESSION.get("SYS_SITE_CD")))){					// 다운로드할 파일 정보					Map viewMap = (Map)result_map.get("ViewMap");					String secureYn = (String) viewMap.get("secret_yn");					String reg_id = (String) viewMap.get("reg_id");					if(param.get("fpcode").equals("000523") || param.get("fpcode").equals("000470") || param.get("fpcode").equals("000552")){						result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN2");					}else{						result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN");					}										if(secureYn.equals("N")) { //shin						Map SITE_SESSION = (Map)param.get(propertiesService.getString("SITE_SESSION_FN"));//						Map SITE_ADM_SESSION = (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));						String USER_ID = "";						 if(SITE_SESSION != null){					    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));					    }else if(SITE_ADM_SESSION != null){					    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));					    }						if(reg_id != null) {							if(!USER_ID.equals(reg_id)) {								throw new JSysException("비정상적인 접근입니다.");							}						} else {							throw new JSysException("비정상적인 접근입니다.");						}					}				}								//첨부파일 카운트 증가//				log.debug("param ==>"+param);				result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN");				insert("JiCmMtm.insertFILE_CNT", param);							//갤러리형 게시판의 목록인 경우			}else if(pstate.equals("FILEDOWN3")){				log.debug("filedown3== start");				Map SITE_ADM_SESSION = (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));								if(!(param.get("scode").equals(propertiesService.getString("SYS_ADMIN_CD","sysadm")))						&& !(propertiesService.getString("SYS_ADMIN_CD","sysadm").equals(SITE_ADM_SESSION.get("SYS_SITE_CD")))){					Map viewMap = (Map)result_map.get("ViewMap");					String secureYn = (String) viewMap.get("secret_yn");					String reg_id = (String) viewMap.get("reg_id");										if(param.get("fpcode").equals("000523") || param.get("fpcode").equals("000470") || param.get("fpcode").equals("000552")){						result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN2");					}else{						result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN");					}										if(secureYn.equals("N")) { //shin						Map SITE_SESSION = (Map)param.get(propertiesService.getString("SITE_SESSION_FN"));//						Map SITE_ADM_SESSION = (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));						String USER_ID = "";						 if(SITE_SESSION != null){					    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));					    }else if(SITE_ADM_SESSION != null){					    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));					    }						if(reg_id != null) {							if(!USER_ID.equals(reg_id)) {								throw new JSysException("비정상적인 접근입니다.");							}						} else {							throw new JSysException("비정상적인 접근입니다.");						}					}				}				result_map = cmDAO.getformData(param, "JiCmMtm.getFILEDOWN");				insert("JiCmMtm.insertFILE_CNT", param);							// 에디터 파일업로드 팝업창호출			}else if(pstate.equals("CF1")){									// 에디터 파일업로드 처리			}else if(pstate.equals("CE2")){									result_map.put("EDIT_IMG_INFO", (List)param.get("FILE_ARR"));							// 메일수신확인 처리			}else if(pstate.equals("MCK")){					update("JiCmCms.updateEmailChk", param);			}		}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  "+q);				result_map.put("result",false);			throw q;		}catch(IOException q){			log.debug("CmMtmDAO01 ctlCMS IOException:");			if(((String)result_map.get("TRS_MSG")).equals("")){				result_map.put("TRS_MSG",q);			}				}catch(SQLException q){			log.debug("CmMtmDAO01 ctlCMS SQLException:");			if(((String)result_map.get("TRS_MSG")).equals("")){				result_map.put("TRS_MSG",q);			}				}catch(NullPointerException q){			log.debug("CmMtmDAO01 ctlCMS NullPointerException:");			if(((String)result_map.get("TRS_MSG")).equals("")){				result_map.put("TRS_MSG",q);			}				}catch(ArrayIndexOutOfBoundsException q){			log.debug("CmMtmDAO01 ctlCMS ArrayIndexOutOfBoundsException:");			if(((String)result_map.get("TRS_MSG")).equals("")){				result_map.put("TRS_MSG",q);			}				}catch(Exception q){			log.debug("CmMtmDAO01 ctlCMS Exception:");			if(((String)result_map.get("TRS_MSG")).equals("")){				result_map.put("TRS_MSG",q);			}			}		    	log.debug("====CmMtmDAO01 ctlCMS End ====");		return result_map;    }    		/**	* <p> InsertFile(등록화면)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 InsertTab_FILE_MGR	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   FILE_ARR		ArrayList		파일정보 배열	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/    //	TODO InsertFile	public Map InsertFile(Map param) throws JSysException, Exception{		 		log.debug("==== InsertFile Start ====");		Map result_map = new HashMap();		Map mapdf2 = new HashMap();		Map del_map = new HashMap();		Map tmp_map = new HashMap();		Map file_cur_cnt = new HashMap();		List del_filelist = new ArrayList();		List file_arr	= new ArrayList();		if(HtmlTag.isNull(param.get("FILE_ARR"))){			return result_map;		}		file_arr	= (List)param.get("FILE_ARR");				String pcode	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("pcode"),"000000") );		String rpcode	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("rpcode"),"") );		String ikey_datas	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("ikey_datas"),"") );		//String iuploadseq   = HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("iuploadseq"),"") );		String imenu_data_title = HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("imenu_data_title"),"") );				String GESI_FL = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("GESI_FL"),"Y"));//게시구분				String [] iuploadseq = null;		String cmfile_FILES_DEL = "";		String [] cmfile_FILES_DEL_sp = new String[0];		String file_group_idx = "";		String USER_ID = "";		String [] CMFILE_GROUP_arr = new String[0];		String [] CMFILE_GROUP_IDX_arr= new String[0];				List rtn_fileseqlist = new ArrayList();				String docsave_root = propertiesService.getString("UPLOADROOTPATH");		int filecnt = 0;				//log.debug("1===========================================================ifilegroup:"+ifilegroup);		//LoginInfo logininfo = (LoginInfo)param.get("logininfo");				int i = 0;		int j = 0;		int k = 0;		Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_SESSION_FN"));	    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    if(SITE_SESSION != null){	    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));	    }else if(SITE_ADM_SESSION != null){	    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));	    }else{	    	USER_ID = "temp";	    }	    	    String sql = "JiCmMtm.InsertFILE_MGR";	    Map file_param = new HashMap();	    int JIT9151_SQ = 0;	    System.out.println("부모의 게시공개여부 GESI_FL::::::::::::::::::::::::"+GESI_FL);	    	    		try{			if(ikey_datas.equals("")){				result_map.put("TRS_MSG","파일그룹키값이 정의되지 않았습니다");				return result_map;			}			//상위조직코드 셋팅			Object oiuploadseq = param.get("iuploadseq");			if(oiuploadseq!=null){				if (oiuploadseq instanceof String){					//log.debug("org_option:1=================");					iuploadseq = new String[1];					iuploadseq[0] = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("iuploadseq"),""));					//iorg_option[0] = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("org_option"),""));				}else if(oiuploadseq instanceof String []){					//log.debug("org_option:2=================");					iuploadseq = (String [])param.get("iuploadseq");				}								// 팝업창으로 업로드된 데이터가 있는경우 해당데이터의 키값을 업데이트해준다				for(i=0;i<iuploadseq.length;i++){					if(!iuploadseq[i].equals("")){						sql = "JiCmMtm.updateFilePx1Key";						tmp_map = new HashMap();												tmp_map.put("rpcode", rpcode);						tmp_map.put("pcode", pcode);						tmp_map.put("ikey_datas", ikey_datas);								tmp_map.put("imenu_data_title", imenu_data_title);												tmp_map.put("iuploadseq", iuploadseq[i]);						tmp_map.put("iuploadseq_sp", iuploadseq[i].split(","));							update(sql, tmp_map);					}								}							}							//삭제할 파일을 파일그룹별로 확인한다				if(!HtmlTag.isNull(param.get("CMFILE_GROUP_arr")) && !HtmlTag.isNull(param.get("CMFILE_GROUP_IDX_arr"))){					CMFILE_GROUP_arr = (String [])param.get("CMFILE_GROUP_arr");					CMFILE_GROUP_IDX_arr = (String [])param.get("CMFILE_GROUP_IDX_arr");										//log.debug("12===========================================================ifilegroup:"+ifilegroup);					if(CMFILE_GROUP_arr.length>0){						for(i=0;i<CMFILE_GROUP_arr.length;i++){							//log.debug("113===========================================================ifilegroup:"+ifilegroup);							cmfile_FILES_DEL = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get(CMFILE_GROUP_arr[i]+"_FILES_DEL"),""));							cmfile_FILES_DEL_sp = cmfile_FILES_DEL.split("::");							file_group_idx = CMFILE_GROUP_IDX_arr[i];														if(cmfile_FILES_DEL_sp.length > 0 && !cmfile_FILES_DEL.equals("")){																tmp_map = new HashMap();								//먼저 삭제할 데이터를 불러온다								param.put("iuploadseq", cmfile_FILES_DEL.replaceAll("::", ","));								param.put("ifilegroup", file_group_idx);																del_map = selectListFilePF1 (param);								del_filelist = (List)del_map.get("rows");								del_filelist = cmsService.getGridListScroll(del_filelist);								log.debug("22222222222222222222222222222222222:");								log.debug("21:fileOrderNo:="+(Map)del_filelist.get(0));								log.debug("22222222222222222222222222222222222:");																for(j=0;j<del_filelist.size();j++){									tmp_map = new HashMap();																		// 삭제될 데이터를 삭제처리한다									sql = "JiCmMtm.updateFileDel";									tmp_map.put("iuploadseq", cmfile_FILES_DEL.replaceAll("::", ","));									tmp_map.put("iuploadseq_sp", cmfile_FILES_DEL_sp);									tmp_map.put("rpcode", rpcode);									tmp_map.put("pcode", pcode);									delete(sql, tmp_map);																		// 실재 파일도 삭제한다									FileUtility.deletefile(docsave_root+"/"											+(rpcode.equals("")?pcode:rpcode)+"/"											+((String)((Map)del_filelist.get(j)).get("update_file_nm")).substring(0, 8)+"/"											+(String)((Map)del_filelist.get(j)).get("update_file_nm"));																		// 삭제될순번의 이후 순번을 -1처리한다									sql = "JiCmMtm.updateFileOrder";									tmp_map.put("rpcode", rpcode);									tmp_map.put("pcode", pcode);									tmp_map.put("ikey_datas", ikey_datas);									tmp_map.put("file_group_idx", file_group_idx);									tmp_map.put("USER_ID", USER_ID);																		tmp_map.put("idelorderno", (String)((Map)del_filelist.get(0)).get("file_order_no"));									update(sql, tmp_map);																	}																															}														//log.debug("1114===========================================================ifilegroup:"+ifilegroup);							// 해당하는 파일그룹의 파일갯수를 확인해서 추가로 입력될 파일의 순번을 조정해준다							sql = "JiCmMtm.selectFileGroupCnt";							tmp_map = new HashMap();							tmp_map.put("rpcode", rpcode);							tmp_map.put("pcode", pcode);							tmp_map.put("ikey_datas", ikey_datas);							tmp_map.put("file_group_idx", file_group_idx);							//log.debug("1114===========================================================ikey_datas:"+ikey_datas);							//log.debug("1114===========================================================file_group_idx:"+file_group_idx);														List list =  list(sql, tmp_map);														if (list==null || list.size()==0 || ((String)((Map)(list.get(0))).get("cnt")).equals("0")){								filecnt = 0;							}else{								filecnt = Integer.parseInt(((String)((Map)(list.get(0))).get("cnt")));													}														file_cur_cnt.put(CMFILE_GROUP_arr[i], filecnt+"");																			if(filecnt==0){								//file_cur_cnt.put(CMFILE_GROUP_arr[i], "0");							}													}					}				}										sql = "JiCmMtm.InsertFILE_MGR";					for(i=0;i<file_arr.size();i++){						//log.debug("21===========================================================");						mapdf2 = (Map)file_arr.get(i);						//log.debug("22==========================================================="+FILE_OBJ_NM.length);						// 만일 파일form명이 배열일경우 배열에 담긴순서대로 무조건 등록한다							if(!"".equals((String)mapdf2.get("fileName")) 									&& ((String)mapdf2.get("fileformName")).indexOf((String)mapdf2.get("file_group_nm")) > -1){								//오라클, TIBERO								if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")										|| propertiesService.getString("CMS_DB_TYPE").equals("TIBERO")){									JIT9151_SQ = getSequence();								//MSSQL								}else if(propertiesService.getString("CMS_DB_TYPE").equals("MSSQL")){									JIT9151_SQ = getSequence();								}																	file_param = new HashMap();								log.debug("InsertFile fileformName=============="+mapdf2.get("fileformName"));								log.debug("InsertFile fileName=================="+mapdf2.get("fileName"));								log.debug("InsertFile file_group_nm=================="+mapdf2.get("file_group_nm"));																log.debug("InsertFile JIT9151_SQ=================="+JIT9151_SQ);								log.debug("InsertFile pcode=================="+pcode);								log.debug("InsertFile ikey_datas=================="+ikey_datas);								log.debug("InsertFile ifile_group=================="+(String)mapdf2.get("file_group_seq"));								log.debug("InsertFile order_no=================="+(String)mapdf2.get("cnt"));																log.debug("23===========================================================");								file_param.put("ifile_seqno",JIT9151_SQ);								file_param.put("rpcode", rpcode);								file_param.put("pcode",pcode);																file_param.put("ikey_datas",ikey_datas);								file_param.put("ifile_group",(String)mapdf2.get("file_group_seq"));								file_param.put("fileName",(String)mapdf2.get("fileName"));								file_param.put("maskName",(String)mapdf2.get("maskName"));								file_param.put("imenu_data_title",imenu_data_title);																								//log.debug("24===========================================================");								file_param.put("order_no",(Integer.parseInt((String)file_cur_cnt.get((String)mapdf2.get("file_group_nm")))+Integer.parseInt((String)mapdf2.get("cnt")))+"");								file_param.put("fileSize",(Long)mapdf2.get("fileSize"));								file_param.put("ifile_desc",HtmlTag.returnString((String)param.get("ifile_desc"),""));								file_param.put("USER_ID",USER_ID);								log.debug("shin >>>>>>>>>>>>>>>>>>>>>>>>>> "+GESI_FL);								log.debug("shin2 >>>>>>>>>>>>>>>>>>>>>>>>>> "+pcode);								if(pcode != null) {									if(pcode.equals("000523") || pcode.equals("000525") || pcode.equals("000470") || pcode.equals("000191")) {										GESI_FL = "N";										log.debug("shin3 >>>>>>>>>>>>>>>>>>>>>>>>>> "+GESI_FL);									}								}								//2019.10.24 faq, 제안서 다운로드 취약점 조치								file_param.put("SECRET_YN",GESI_FL);								rtn_fileseqlist.add(JIT9151_SQ);								insert(sql, file_param);																//log.debug("25===========================================================");								k++;							}						}			result_map.put("result", true);			result_map.put("rtn_fileseqlist",rtn_fileseqlist);					result_map.put("TRS_MSG","");		}catch(IOException q){			log.error("IOException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(SQLException q){			log.error("SQLException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(NullPointerException q){			log.error("NullPointerException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.error("ArrayIndexOutOfBoundsException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(Exception q){			log.error("InsertFile:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");						throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}		log.debug("==== InsertFile END ====");		return result_map;		}		/**	* <p> InsertFile(등록화면)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 InsertTab_FILE_MGR	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   FILE_ARR		ArrayList		파일정보 배열	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/    //	TODO InsertFilePX1	public Map InsertFilePX1(Map param) throws JSysException, Exception{		 		log.debug("==== InsertFilePX1 Start ====");		Map result_map = new HashMap();		Map mapdf2 = new HashMap();		Map del_map = new HashMap();		Map tmp_map = new HashMap();		Map file_cur_cnt = new HashMap();		List del_filelist = new ArrayList();				List file_arr	= (List)param.get("FILE_ARR");		String pcode	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("pcode"),"000000") );		String rpcode	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("rpcode"),"000000") );		String scode	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("scode"),"") );		String ikey_datas	= HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("ikey_datas"),"") );		String iuploadseq   = HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("iuploadseq"),"") );		String ifilegroup   = HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("ifilegroup"),"") );		String filenms = HtmlTag.StripStrInXss( HtmlTag.returnString((String)param.get("filenms"),"") );		String [] filenms_sp = new String[0];		String fileseqs = "";		String cmfile_FILES_DEL = "";		String [] cmfile_FILES_DEL_sp = new String[0];		String file_group_idx = "";		String APP_F = "";		String APP_F_RENAME = "";		String APP_F_SIZE = "";		String USER_ID = "";		String [] CMFILE_GROUP_arr = new String[0];		String [] CMFILE_GROUP_IDX_arr= new String[0];		String [] iuploadseq_sp = new String[0];				List rtn_fileseqlist = new ArrayList();		List rtn_filenmlist = new ArrayList();				String docsave_root = propertiesService.getString("UPLOADROOTPATH");		int filecnt = 0;				//log.debug("1===========================================================ifilegroup:"+ifilegroup);		//LoginInfo logininfo = (LoginInfo)param.get("logininfo");				int max_seq = 0;		int i = 0;		int j = 0;		int k = 0;		//log.debug("1===========================================================SITE_ADM_SESSION_FN:"+propertiesService.getString("SITE_ADM_SESSION_FN"));	    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    //log.debug("1===========================================================USER_ID:"+(String)SITE_SESSION.get("USER_ID"));	    USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));	    	    String sql = "JiCmMtm.InsertFILE_MGR";	    Map file_param = new HashMap();	    int JIT9151_SQ = 0;	    		try{							CMFILE_GROUP_arr = (String [])param.get("CMFILE_GROUP_arr");				CMFILE_GROUP_IDX_arr = (String [])param.get("CMFILE_GROUP_IDX_arr");				log.debug("12===========================================================ifilegroup:"+ifilegroup);				//삭제할 파일을 파일그룹별로 확인한다				for(i=0;i<CMFILE_GROUP_arr.length;i++){					log.debug("113===========================================================ifilegroup:"+ifilegroup);					cmfile_FILES_DEL = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get(CMFILE_GROUP_arr[i]+"_FILES_DEL"),""));					cmfile_FILES_DEL_sp = cmfile_FILES_DEL.split("::");					file_group_idx = CMFILE_GROUP_IDX_arr[i];					log.debug("2111111:cmfile_FILES_DEL_sp.length:"+cmfile_FILES_DEL_sp.length);					if(!iuploadseq.equals("")){						iuploadseq_sp = iuploadseq.split(",");						for(j=0;j<iuploadseq_sp.length;j++){							rtn_fileseqlist.add(iuploadseq_sp[j]);						}					}										if(cmfile_FILES_DEL_sp.length > 0 && !cmfile_FILES_DEL.equals("")){																		tmp_map = new HashMap();						//먼저 삭제할 데이터를 불러온다						param.put("iuploadseq", cmfile_FILES_DEL.replaceAll("::", ","));						param.put("ifilegroup", file_group_idx);						// 리턴될 키값을 정리한다						if(!iuploadseq.equals("")){							for(j=0;j<rtn_fileseqlist.size();j++){								for(k=0;k<cmfile_FILES_DEL_sp.length;k++){									if(cmfile_FILES_DEL_sp[k].equals((String)rtn_fileseqlist.get(j))){										rtn_fileseqlist.remove(j);									}								}							}													}												del_map = selectListFilePF1 (param);						del_filelist = (List)del_map.get("rows");						del_filelist = cmsService.getGridListScroll(del_filelist);						log.debug("22222222222222222222222222222222222:");						log.debug("21:fileOrderNo:="+((Map)del_filelist.get(0)).get("file_order_no")+":FILE_ORDER_NO="+((Map)del_filelist.get(0)).get("FILE_ORDER_NO")+":fileorderno="+((Map)del_filelist.get(0)).get("fileorderno"));						log.debug("22222222222222222222222222222222222:");												for(j=0;j<del_filelist.size();j++){							tmp_map = new HashMap();														// 삭제될 데이터를 삭제처리한다							// 만약 팝업창에서 삭제된 데이터의 경우는 데이터베이스도 삭제처리한다							if(ikey_datas.equals("")){								sql = "JiCmMtm.deleteFileDel";								tmp_map.put("iuploadseq", cmfile_FILES_DEL.replaceAll("::", ","));								tmp_map.put("iuploadseq_sp", cmfile_FILES_DEL_sp);															delete(sql, tmp_map);															}else{								sql = "JiCmMtm.updateFileDel";								tmp_map.put("iuploadseq", cmfile_FILES_DEL.replaceAll("::", ","));								tmp_map.put("iuploadseq_sp", cmfile_FILES_DEL_sp);															delete(sql, tmp_map);							}														// 실재 파일도 삭제한다							FileUtility.deletefile(docsave_root+"/"									+(rpcode.equals("")?pcode:rpcode)+"/"									+((String)((Map)del_filelist.get(j)).get("update_file_nm")).substring(0, 8)+"/"									+(String)((Map)del_filelist.get(j)).get("update_file_nm"));														// 삭제될순번의 이후 순번을 -1처리한다							sql = "JiCmMtm.updateFileOrder";							tmp_map.put("pcode", pcode);							tmp_map.put("rpcode", rpcode);							tmp_map.put("ikey_datas", ikey_datas);							if(!ifilegroup.equals("")){								tmp_map.put("file_group_idx", ifilegroup);							}else{								tmp_map.put("file_group_idx", file_group_idx);							}							tmp_map.put("USER_ID", USER_ID);														tmp_map.put("iuploadseq", iuploadseq);							tmp_map.put("iuploadseq_sp", iuploadseq.split(","));							tmp_map.put("idelorderno", (String)((Map)del_filelist.get(0)).get("file_order_no"));							update(sql, tmp_map);													}												log.debug("1114===========================================================ifilegroup:"+ifilegroup);						    						}										// 해당하는 파일그룹의 파일갯수를 확인해서 추가로 입력될 파일의 순번을 조정해준다					sql = "JiCmMtm.selectFileGroupCnt";					tmp_map = new HashMap();					tmp_map.put("pcode", pcode);					tmp_map.put("rpcode", rpcode);						tmp_map.put("ikey_datas", ikey_datas);					if(!ifilegroup.equals("")){						tmp_map.put("file_group_idx", ifilegroup);					}else{						tmp_map.put("file_group_idx", file_group_idx);					}																tmp_map.put("iuploadseq", iuploadseq);					tmp_map.put("iuploadseq_sp", iuploadseq.split(","));									    	List list =  list(sql, tmp_map);			    	if (list==null || list.size()==0 || ((String)((Map)(list.get(0))).get("cnt")).equals("0")){			    		filecnt = 0;			    	}else{			    		filecnt = Integer.parseInt(((String)((Map)(list.get(0))).get("cnt")));									    	}			    				    	log.debug("11115===========================================================ifilegroup:"+ifilegroup);			    				    	if(!ifilegroup.equals("")){			    		file_cur_cnt.put(CMFILE_GROUP_arr[i], filecnt+"");			    	}else{			    		file_cur_cnt.put(CMFILE_GROUP_arr[i], filecnt+"");			    	}			    	log.debug("111116===========================================================ifilegroup:"+ifilegroup);															if(ikey_datas.equals("")){						log.debug("21==========================================================CMFILE_GROUP_arr[i]="+CMFILE_GROUP_arr[i]);			    		file_cur_cnt.put(CMFILE_GROUP_arr[i], "0");					}									}								param.put("iuploadseq", iuploadseq);						sql = "JiCmMtm.InsertFILE_MGR";					for(i=0;i<file_arr.size();i++){						//log.debug("21===========================================================");						mapdf2 = (Map)file_arr.get(i);						//log.debug("22==========================================================="+FILE_OBJ_NM.length);						// 만일 파일form명이 배열일경우 배열에 담긴순서대로 무조건 등록한다							if(!"".equals((String)mapdf2.get("fileName"))){								log.debug("InsertFile fileformName=============="+mapdf2.get("fileformName"));								log.debug("InsertFile fileName=================="+mapdf2.get("fileName"));								log.debug("InsertFile file_group_nm=================="+mapdf2.get("file_group_nm"));																								log.debug("InsertFile pcode=================="+pcode);								log.debug("InsertFile rpcode=================="+rpcode);								log.debug("InsertFile ikey_datas=================="+ikey_datas);								log.debug("InsertFile ifile_group=================="+(String)mapdf2.get("file_group_seq"));								log.debug("InsertFile order_no=================="+(String)mapdf2.get("cnt"));								log.debug("InsertFile order_no=================="+(String)file_cur_cnt.get((String)mapdf2.get("file_group_nm")));								log.debug("InsertFile order_no=================="+(Integer.parseInt((String)file_cur_cnt.get((String)mapdf2.get("file_group_nm")))+Integer.parseInt((String)mapdf2.get("cnt")))+"");																//오라클, TIBERO								if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")										|| propertiesService.getString("CMS_DB_TYPE").equals("TIBERO")){									JIT9151_SQ = cmDAO.getSequence("JIT9151");								//MSSQL								}else if(propertiesService.getString("CMS_DB_TYPE").equals("MSSQL")){									JIT9151_SQ = getSequence();								}								log.debug("InsertFile JIT9151_SQ=================="+JIT9151_SQ);								file_param = new HashMap();								//log.debug("23===========================================================");								file_param.put("ifile_seqno",JIT9151_SQ);								if(rpcode.equals("")){									file_param.put("pcode",pcode);								}else{									file_param.put("pcode",rpcode);								}																file_param.put("ikey_datas",ikey_datas);								file_param.put("ifile_group",(String)mapdf2.get("file_group_seq"));								file_param.put("fileName",(String)mapdf2.get("fileName"));								file_param.put("maskName",(String)mapdf2.get("maskName"));																//log.debug("24===========================================================");								file_param.put("order_no",(Integer.parseInt((String)file_cur_cnt.get((String)mapdf2.get("file_group_nm")))+Integer.parseInt((String)mapdf2.get("cnt")))+"");								file_param.put("fileSize",(Long)mapdf2.get("fileSize"));								file_param.put("ifile_desc",HtmlTag.returnString((String)param.get("ifile_desc"),""));								file_param.put("USER_ID",USER_ID);								rtn_fileseqlist.add(JIT9151_SQ+"");								insert(sql, file_param);																//log.debug("25===========================================================");								k++;							}						}					//log.debug("25===========================================================1");					if(!filenms.equals("")){				//log.debug("25===========================================================2");					filenms_sp = filenms.split(",");				for(i=0;i<filenms_sp.length;i++){					rtn_filenmlist.add(filenms_sp[i]);					log.debug("25=============================filenms_sp[i]:"+filenms_sp[i]);				}				//log.debug("25===========================================================3");								fileseqs = "";				for(i=0;i<rtn_fileseqlist.size();i++){					log.debug("25============================(String)rtn_fileseqlist.get(i):"+(String)rtn_fileseqlist.get(i));					fileseqs += (String)rtn_fileseqlist.get(i)+"";					if(i<rtn_fileseqlist.size()-1){						fileseqs += ",";					}				}			}						result_map.put("result", true);			result_map.put("rtn_fileseqlist",rtn_fileseqlist);				result_map.put("rtn_filenmlist",rtn_filenmlist);			log.debug("25===========================================================5");			//result_map.put("rtn_filehtmlarra",getFileHtmlArray(fileseqs,filenms));			result_map.put("rtn_filehtmlarra",getFileHtmlObj(fileseqs,filenms));									result_map.put("TRS_MSG","");		}catch(IOException q){			log.error("IOException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(SQLException q){			log.error("SQLException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(NullPointerException q){			log.error("NullPointerException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.error("ArrayIndexOutOfBoundsException:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");					throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}catch(Exception q){			log.error("InsertFile:");//			result_map.put("TRS_MSG","파일 저장중 에러가 발생했습니다.");						throw new JSysException(super.getMessage("ji.cm.common.msg.error.save.file"),q);		//파일 저장중 에러가 발생했습니다.		}		log.debug("==== InsertFilePX1 END ====");		return result_map;		}			/**	 * Method Name  : selectListMatrPX1Grid	 * Description  : 자재마스터 검색팝업창	* Comment      : 	* Parameter    : param - 정보가 담긴 Map 	* form History : 2015/03/23 : 이금용:  최초작성	*/	//	TODO selectListFilePF1	public Map selectListFilePF1 (Map param) throws Exception {		log.debug("==== selectListFilePF1 Start ====");		Map result_map = new HashMap();		int curr_page = Integer.parseInt(HtmlTag.returnString((String)param.get("curr_page"),"1"),10);				int show_rows = Integer.parseInt(HtmlTag.returnString((String)param.get("show_rows"),"10"),10);		int totalCount = 0;		List rtn_list = new ArrayList();		List gridList = new ArrayList();		String iuploadseq = HtmlTag.returnString((String)param.get("iuploadseq"),"");		String [] iuploadseq_sp = new String[0];				try{			if(!iuploadseq.equals("")){		  		iuploadseq_sp = iuploadseq.split(",");		  		param.put("iuploadseq_sp", iuploadseq_sp);		  		rtn_list = list("JiCmMtm.selectListFilePF1", param);		  				  		gridList = cmsService.getGridListScroll(rtn_list);							}else{						  		rtn_list = list("JiCmMtm.selectListFilePF2", param);		  				  		gridList = cmsService.getGridListScroll(rtn_list);							}	  			  		result_map.put("rows",gridList);		} catch(NullPointerException e){			log.debug("selectListFilePF1 NullPointerException");		} catch(ArrayIndexOutOfBoundsException e){			log.debug("selectListFilePF1 ArrayIndexOutOfBoundsException");	  				}catch(Exception q){			log.debug("==== selectListFilePF1 Exception ====");		}    	log.debug("==== selectListFilePF1 End ====");		return result_map;	} 	 		/**	 * 	 * Method Name  : getFileHtmlArray	 * Description      : 파일 스트링을 넘겨서  html 배열 문자를 생성한다  	 * Comment        :  	 * Parameter       : 	 * form History    : 2015. 3. 30. : mrkim:  최초작성	 * @param formatStr	 * @return	 */	public static String getFileHtmlArray(String file_seqno,String file_nm) {		 String rtn_str = "";			String [] file_seqno_sp = new String[0];			String [] file_nm_sp = new String[0];			int fi = 0;			if(!file_seqno.equals("")){				rtn_str = "[";				file_seqno_sp = file_seqno.split("::");				file_nm_sp = file_nm.split("::");				for(fi=0;fi<file_seqno_sp.length;fi++){					rtn_str += "{";					rtn_str += "file_seqno";					rtn_str += ":";					rtn_str += "\""+file_seqno_sp[fi]+"\"";					rtn_str += ",";					rtn_str += "file_nm";					rtn_str += ":";					rtn_str += "\""+file_nm_sp[fi]+"\"";					rtn_str += "}";					if(fi< file_seqno_sp.length-1){						rtn_str += ",";					}				}				rtn_str += "]";			}				 return rtn_str;	}		/**	 * 	 * Method Name  : getFileListToHtmlArray	 * Description      : 파일 스트링을 넘겨서  html 배열 문자를 생성한다  	 * Comment        :  	 * Parameter       : 	 * form History    : 2019. 3. 14. : lky:  최초작성	 * @param formatStr	 * @return	 */	public static String getFileListToHtmlArray(List fileList) {		 String rtn_str = "";		 Map tempM = new HashMap();			int fi = 0;			if(fileList != null){				if(fileList.size() > 0){					rtn_str = "[";					for(fi=0;fi<fileList.size();fi++){						tempM = (Map)fileList.get(fi);						rtn_str += "{";						rtn_str += "file_seqno";						rtn_str += ":";						rtn_str += "\""+tempM.get("idx")+"\"";						rtn_str += ",";						rtn_str += "file_nm";						rtn_str += ":";						rtn_str += "\""+tempM.get("fileNm")+"\"";						rtn_str += "}";						if(fi< fileList.size()-1){							rtn_str += ",";						}					}					rtn_str += "]";									}			}		 return rtn_str;	}				/**	 * 	 * Method Name  : getFileHtmlObj	 * Description      : 파일 스트링을 넘겨서  html 배열 문자를 생성한다  	 * Comment        :  	 * Parameter       : 	 * form History    : 2015. 3. 30. : mrkim:  최초작성	 * @param formatStr	 * @return	 */	public static List getFileHtmlObj(String file_seqno,String file_nm) {		 List rtn_list = new ArrayList();		 Map tmp_map = new HashMap();			String [] file_seqno_sp = new String[0];			String [] file_nm_sp = new String[0];			int fi = 0;			if(!file_seqno.equals("")){				file_seqno_sp = file_seqno.split(",");				file_nm_sp = file_nm.split(",");				for(fi=0;fi<file_seqno_sp.length;fi++){					tmp_map = new HashMap();					tmp_map.put("file_seqno", file_seqno_sp[fi]);					tmp_map.put("file_nm", file_nm_sp[fi]);					rtn_list.add(tmp_map);				}			}				 return rtn_list;	}		/**	 * 	 * Method Name  : deleteFileGroup	 * Description      : 해당업무에서 삭제할 파일의 정보를 받아서 삭제처리하는 메소드	 * Comment        :  	 * Parameter       : 	 * form History    : 2015. 4. 28. : 이금용:  최초작성	 * @param param	 * @return	 */	public int deleteFileGroup(Map param) {		String ikey_datas = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("ikey_datas"),""));		String pcode = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("pcode"),""));		String scode = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("scode"),""));		String ifilegroup = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("ifilegroup"),""));		Map del_map = new HashMap();		Map tmp_map = new HashMap();		List del_filelist = new ArrayList();		int rtn_int  = 0;		int j = 0;		String sql = "";		//log.debug("1===========================================================SITE_ADM_SESSION_FN:"+propertiesService.getString("SITE_ADM_SESSION_FN"));	    Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    if(!scode.equals(propertiesService.getString("SYS_ADMIN_CD","sysadm"))){	    	SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_SESSION_FN"));	    }	    //log.debug("1===========================================================USER_ID:"+(String)SITE_SESSION.get("USER_ID"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));			    String docsave_root = propertiesService.getString("UPLOADROOTPATH");		try{					if(!pcode.equals("") && !ikey_datas.equals("")){								del_map = selectListFilePF1 (param);				del_filelist = (List)del_map.get("rows");				del_filelist = cmsService.getGridListScroll(del_filelist);				log.debug("deleteFileGroup:ikey_datas:"+ikey_datas+":pcode:"+pcode+":ifilegroup:"+ifilegroup);				//파일이 없는경우 delete시 에러남 추석처리함 kss				//log.debug("21:fileOrderNo:="+((Map)del_filelist.get(0)).get("file_order_no")+":FILE_ORDER_NO="+((Map)del_filelist.get(0)).get("FILE_ORDER_NO")+":fileorderno="+((Map)del_filelist.get(0)).get("fileorderno"));				log.debug("deleteFileGroup22222222222222222222222222222222222:");								// 해당하는 파일을 전부 삭제한다				for(j=0;j<del_filelist.size();j++){					//tmp_map = new HashMap();					//tmp_map = del_filelist.get(j);					// 실재 파일도 삭제한다					FileUtility.deletefile(docsave_root+"/"							+pcode+"/"							+((String)((Map)del_filelist.get(j)).get("update_file_nm")).substring(0, 8)+"/"							+(String)((Map)del_filelist.get(j)).get("update_file_nm"));				}								// 삭제될 데이터를 삭제처리한다					sql = "JiCmMtm.updateFileDelGroup";					update(sql, param);							}						}catch(IOException q){			log.error("deleteFileGroup IOException:");		}catch(SQLException q){			log.error("deleteFileGroup SQLException:");			}catch(NullPointerException q){			log.error("deleteFileGroup NullPointerException:");				}catch(ArrayIndexOutOfBoundsException q){			log.error("deleteFileGroup ArrayIndexOutOfBoundsException:");				}catch(Exception q){			log.error("deleteFileGroup Exception:");				}						return rtn_int;	}			/**	* <p> 해당코드의 등록 코드값 생성 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* Postcondition: 조회 결과를 리턴한다 	*	* @param   TabName		String		테이블명	* @param   ColName		String		컬럼명	* @param   WhereStr		String		where조건	* @param   ColLen		int			컬럼길이	* 	* @return  	 * @throws ISPException 	* @throws  	*/	public int getSequence() throws Exception {		String sql = "JiCmMtm.getSequence";			Map param = new HashMap();				List list = new ArrayList();		Map tmp_map = new HashMap();		int rtn_str = 0;			list =  list(sql, param);	    	if (list==null || list.size()==0 || ((Integer)(list.get(0))).intValue() == 0) return 0;	    	else return ((Integer)(list.get(0))).intValue();			}	}