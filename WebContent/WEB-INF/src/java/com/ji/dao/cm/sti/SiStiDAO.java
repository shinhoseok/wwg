/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.ji.dao.cm.sti;
import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.DefaultTransactionDefinition;import com.ji.common.DateUtility;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.dao.cm.CMDAO;import com.ji.util.CmsDsDao;import egovframework.rte.fdl.property.EgovPropertyService;
/**   * @Class Name : SiStiDAO.java * @Description : SiStiDAO DAO Class * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2009.03.16           최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2009. 03.16 * @version 1.0 * @see *  */@Repository("siStiDAO")public class SiStiDAO extends CmsDsDao {	protected Logger log = Logger.getLogger(SiStiDAO.class); //현재 클래스 이름을 Logger에 등록
	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;
    /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;
    //event end    @Resource(name="txManagerds")    private PlatformTransactionManager txManagerds;    
    
    /**	 * 컨트롤 메소드	 * @param Map	 * @return 메뉴트리	 * @exception Exception	 */    //	TODO ctlCMS    public Map ctlCMS(Map param, String classMethod) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {				log.debug("==== siStiDAO ctlCMS Start ====");		Map result_map = new HashMap();		String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");
		try{			log.debug("ctlCMS classMethod:"+classMethod);			//일별통계			if(classMethod.equals("ctlAS")){				if(pstate.equals("L")){					String curDate = DateUtility.getToday();					result_map.put("optionYear",cmDAO.bizMakeOptionList("", curDate.substring(0,4),"JiCmSti.getYear")); //년도가져오기					result_map.put("optionMonth",DateUtility.getMonthOption()); //년도가져오기
				// 통계조회				}else if(pstate.equals("X")){ //일별차트					result_map.put("horichart",cmDAO.selectListBarPieChart(param,"JiCmSti.YearMonthCHART"));  //월별					result_map.put("barchart",cmDAO.selectListBarPieChart(param, "JiCmSti.DayCHART"));//요일별									}else if(pstate.equals("X1")){ //일별그리드					result_map = cmDAO.selectListGrid(param, "JiCmSti.YearMonthCHART"); 									}else if(pstate.equals("X2")){ //일별그리드					result_map = cmDAO.selectListGrid(param, "JiCmSti.DayCHART"); 
				}
				//result_map = ctlAS(param);			// 등록			}else if(classMethod.equals("ctlASM")){				if(pstate.equals("L")){					String curDate = DateUtility.getToday();					result_map.put("optionYear",cmDAO.bizMakeOptionList("", curDate.substring(0,4),"JiCmSti.getYear")); //년도가져오기					result_map.put("optionMonth",DateUtility.getMonthOption()); //년도가져오기					result_map.put("siteCode",cmDAO.bizMakeOptionList("", "S01","JiCmSti.getSitecode")); //년도가져오기									// 통계조회				}else if(pstate.equals("X")){ //일별차트					result_map = cmDAO.selectListBarPieChart(param,"JiCmSti.MenuCHART");  //메뉴별 차트				}else if(pstate.equals("X1")){ //일별차트					result_map = cmDAO.selectListGrid(param, "JiCmSti.MenuCHART"); 				}				
			}else if(classMethod.equals("ctlCRUD")){
				if(pstate.equals("L")){					String curDate = DateUtility.getToday();					result_map.put("optionYear",cmDAO.bizMakeOptionList("", curDate.substring(0,4),"JiCmSti.getYear")); //년도가져오기					result_map.put("optionMonth",DateUtility.getMonthOption()); //년도가져오기					result_map.put("siteCode",cmDAO.bizMakeOptionList("", "S01","JiCmSti.getSitecode")); //년도가져오기
				// 통계조회				}else if(pstate.equals("X")){ //일별차트					result_map = cmDAO.selectListBarPieChart(param,"JiCmSti.MenuCrudCHART");  //메뉴별 차트				}else if(pstate.equals("X1")){ //일별차트					result_map = cmDAO.selectListGrid(param, "JiCmSti.MenuCrudCHART"); 				}
			}						
 		}catch(IOException q){			log.debug("IOException:");			if(((String)result_map.get("TRS_MSG")).equals("")){ 				result_map.put("TRS_MSG",q); 			}					throw q;		}catch(SQLException q){			log.debug("SQLException:");			if(((String)result_map.get("TRS_MSG")).equals("")){ 				result_map.put("TRS_MSG",q); 			}				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		}catch(NullPointerException q){			log.debug("NullPointerException:");			if(((String)result_map.get("TRS_MSG")).equals("")){ 				result_map.put("TRS_MSG",q); 			}				throw new JSysException(super.getMessage("ji.cm.common.msg.error.unknown"),q);		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			if(((String)result_map.get("TRS_MSG")).equals("")){ 				result_map.put("TRS_MSG",q); 			}					throw new JSysException(super.getMessage("ji.cm.common.msg.error.unknown"),q);		}catch(Exception q){ 			log.debug("ctlCMS Exception:"+q); 			if(((String)result_map.get("TRS_MSG")).equals("")){ 				result_map.put("TRS_MSG",q); 			} 			throw new JSysException(super.getMessage("ji.cm.common.msg.error.unknown"),q); 		}
		log.debug("==== ctlCMS End ====");
		return result_map;
    }   	/**	* <p> MAController.java(메인컨트롤클래스)에서 접속카운터일별통계관련 DAO를 제어하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 조회한 결과 리스트를 받아서 리턴한다	*	* @param   param		Map		파라메터	*	* @return  접속카운터관리 일별통계관련 결과값을 리턴한다	* @throws  	*/    //	TODO ctlAS
	public Map ctlAS (Map param) throws NullPointerException, ArrayIndexOutOfBoundsException, Exception {		log.debug("==== ctlAS Start ====");
		Map result_map = new HashMap();
		
		String curdate = HtmlTag.returnString((String)param.get("curdate"),"");// 현재일자		String syyyy = HtmlTag.returnString((String)param.get("syyyy"),curdate.substring(0,4));// 검색년도		String smm = HtmlTag.returnString((String)param.get("smm"),curdate.substring(4,6));// 검색 월		String sscode = HtmlTag.returnString((String)param.get("sscode"),"S01"); // 검색 사이트
		String sql = "";		Map query_param = new HashMap();	    List rtn_list = new ArrayList();
		try{			// 사이트 코드를 불러온다			sql = "asDAO.getSite";			rtn_list = list(sql, query_param);			result_map.put("ListSITE", rtn_list);
			// 일별통계리스트를 가져온다			sql = "asDAO.getListASD";			query_param = new HashMap();			query_param.put("sscode",sscode);			query_param.put("syyyysmm",syyyy+smm);			query_param.put("syyyysmm01",syyyy+"-"+smm+"-01");
			rtn_list = list(sql, query_param);
			/*log.debug("getListASD:"+query.toString());			log.debug("sscode:"+sscode);			log.debug("syyyy+smm:"+syyyy+smm);			log.debug("sscode:"+sscode);			log.debug("01-01-01:"+syyyy+"-"+smm+"-01");*/
			result_map.put("ListASD", rtn_list);
			// 요일별 통계리스트를 가져온다 일~토			sql = "asDAO.getListASW";			query_param = new HashMap();			query_param.put("sscode",sscode);			query_param.put("syyyysmm",syyyy+smm);
			rtn_list = list(sql, query_param);			result_map.put("ListASW", rtn_list);			
		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;								}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}
    	log.debug("==== ctlAS End ====");		return result_map;
	}
		/**	* <p> MAController.java(메인컨트롤클래스)에서 접속카운터관련 DAO를 제어하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 조회한 결과 리스트를 받아서 리턴한다	*	* @param   param		Map		파라메터	*	* @return  접속카운터관리 메뉴별통계관련 결과값을 리턴한다	* @throws  	*/	//	TODO ctlASM	public Map ctlASM (Map param) throws NullPointerException, ArrayIndexOutOfBoundsException, Exception {				log.debug("==== ctlASM Start ====");		Map result_map = new HashMap();				String curdate = HtmlTag.returnString((String)param.get("curdate"),"");// 현재일자		String syyyy = HtmlTag.returnString((String)param.get("syyyy"),curdate.substring(0,4));// 검색년도		String smm = HtmlTag.returnString((String)param.get("smm"),curdate.substring(4,6));// 검색 월		String sscode = HtmlTag.returnString((String)param.get("sscode"),"S01"); // 검색 사이트			String sql = "";		Map query_param = new HashMap();	    List rtn_list = new ArrayList();
		try{			// 사이트 코드를 불러온다			sql = "asDAO.getSite";			rtn_list = list(sql, query_param);			result_map.put("ListSITE", rtn_list);					// 메뉴별통계리스트를 가져온다			sql = "asDAO.getListASM";			query_param = new HashMap();			query_param.put("sscode",sscode);			query_param.put("syyyysmm",syyyy+smm);				log.debug("sscode:"+sscode);			log.debug("syyyy+smm:"+syyyy+smm);			log.debug("sscode:"+sscode);			log.debug("01-01-01:"+syyyy+"-"+smm+"-01");
			rtn_list = list(sql, query_param);			result_map.put("ListASM", rtn_list);			
		}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;								}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}
    	log.debug("==== ctlASM End ====");
		return result_map;
	}	

	/**	* <p> MAController.java(메인컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		//	TODO insertAS 	public Map insertAS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== insertAS : START ====");		Map result_map = new HashMap();
		String sql = "";		int max_seq = 0;				try{			if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")){				max_seq = cmDAO.getTableMaxSeq("JIT8100","ACES_LOG_SEQNO","");			}else{				max_seq = getTableMaxSeq("ACES_LOG_SEQNO","");			}									// 등록될 IDX를 채번한다			sql = "JiCmSti.insertACCESS_CNT";			param.put("max_seq", max_seq);			insert(sql, param);			result_map.put("TRS_MSG","");							}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;								}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		///저장 중 오류가 발행하였습니다.		}
		log.debug("==== insertAS : END ====");		return result_map;	
	}   		/**	* <p> 해당테이블의 순서 키값 생성 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* Postcondition: 조회 결과를 리턴한다 	*	* @param   sTable_Nm		String		대상테이블명	* @param   sColumn_Nm		String 		대상테이블의 키컬럼명	* @param   WhereParam		String 		WHERE 조건 	*	* @return  	 * @throws ISPException 	* @throws  	*/	public int getTableMaxSeq(String sColumn_Nm, String WhereParam) throws Exception {		//	TODO getTableMaxSeq				log.debug("============== getTableMaxSeq : START ==============");				String sql = "";		int rtn_int = 0;						try{			sql = "JiCmCms.createSeq8";								Map param = new HashMap();			param.put("WhereParam", WhereParam);			param.put("tb_name", "JIT8100");			insert(sql, param);							sql = "JiCmCms.selectSeq8";				List list =  list(sql, param);		    	if (list==null || list.size()==0 || ((Integer)(list.get(0))).intValue() == 0) rtn_int= 0;		    	else rtn_int= ((Integer)(list.get(0))).intValue();					    		    	return rtn_int;					/*}catch(Exception e){			return 0;*/		}finally{			log.debug("============== getTableMaxSeq : END ==============");		}	}	
}
