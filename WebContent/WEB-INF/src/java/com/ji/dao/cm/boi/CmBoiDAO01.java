/**   * @Class Name : CmBoiDAO01.java * @Description : CmBoiDAO01 DAO Class 기준정보 * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2016.10.31          최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2016.10.31 * @version 1.0 * @see *  */package com.ji.dao.cm.boi;
import java.io.File;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import javax.annotation.Resource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ji.cm.CM_Util;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.dao.cm.CMDAO;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.util.Page;import egovframework.rte.fdl.property.EgovPropertyService;

@Repository("cmBoiDAO01")
public class CmBoiDAO01 extends CmsDsDao {
	protected Logger log = Logger.getLogger(CmBoiDAO01.class); //현재 클래스 이름을 Logger에 등록
	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;           /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;     /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;	
    /**	 * 관리 메소드	 * @param Map	 * @return Map	 * @exception Exception	 */    // TODO : ctlCMS    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {		log.debug("==== CmBoiDAO01 ctlCMS Start ====");		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");			try{			//Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));			// 기준정보 목록			if(pstate.equals("L")){
			// 기준정보리스트			}else if(pstate.equals("XL1")){ //ajax jqGrid data관련				result_map = selectListGrid(param); 							// 기준정보 트리			}else if(pstate.equals("XL4")){ //ajax jqGrid data관련					List treelist = cmDAO.getListSqlOnly (param,"JiCmCms.getBoiTreeList");						  		result_map.put("treerows",treelist);		  		result_map.put("treetotal",treelist.size());		  				  		
			// 목록화면에서 엑셀업로드처리			}else if(pstate.equals("EXCELUPLOAD")){					result_map = selectExcelInsert(param);			// 등록처리			}else if(pstate.equals("C")){				result_map = insertCode(param);				// 수정처리			}else if(pstate.equals("U")){				result_map = updateCode(param);				// 삭제처리			}else if(pstate.equals("D")){				result_map = deleteCode(param);									// 기준정보 팝업창			}else if(pstate.equals("PF1")){	
			// 기준정보 팝업목록			}else if(pstate.equals("PX1")){ //ajax jqGrid data관련				// 검색어가 있는경우만 조회한다
			}		}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> : ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}
	
    	log.debug("==== CmBoiDAO01 ctlCMS End ====");
		return result_map;
    }
	/**	 * Method Name  : selectListGrid	 * Description  : 기준정보 리스트 	* Comment      : 	* Parameter    : param - 정보가 담긴 Map 	* form History : 2016/10/31 : 이금용:  최초작성	*/	//	TODO selectListGrid	public Map selectListGrid (Map param) throws Exception {		log.debug("==== selectListGrid Start ====");		Map result_map = new HashMap();		//int curr_page = Integer.parseInt(HtmlTag.returnString((String)param.get("curr_page"),"1"),10);				//int show_rows = Integer.parseInt(HtmlTag.returnString((String)param.get("show_rows"),"10"),10);		int curr_page = Integer.parseInt(HtmlTag.returnString((String)param.get("jqGrid.page"),"1"));		//com.js를 사용하는 jqgrid는 그리드변수를 이와 같이 변경필요	-mrkim (2015/06/18))		int show_rows = Integer.parseInt(HtmlTag.returnString((String)param.get("jqGrid.rows"),"10"));	//com.js를 사용하는 jqgrid는 그리드변수를 이와 같이 변경필요	-mrkim (2015/06/18))		String jqgrid_oper = HtmlTag.returnString((String)param.get("jqGrid.oper"),"");		int totalCount = 0;		String [] se_stdinfo_dtl_cd = null;//코드분류		String final_se_stdinfo_dtl_cd = "";				try{			//log.debug("==== selectListGrid 1111111111111111 ====");			Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));			//코드분류 셋팅			Object ostdinfo_dtl_cd = param.get("se_stdinfo_dtl_cd");			if(ostdinfo_dtl_cd != null){				//log.debug("==== selectListGrid 2222222222222222 ====");				if (ostdinfo_dtl_cd instanceof String){					//log.debug("org_option:1=================");					se_stdinfo_dtl_cd = new String[1];					se_stdinfo_dtl_cd[0] = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("se_stdinfo_dtl_cd"),""));					//log.debug("==== selectListGrid 3333333333333333-111111 ====");					//iorg_option[0] = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("org_option"),""));				}else if(ostdinfo_dtl_cd instanceof String []){					//log.debug("org_option:2=================");					se_stdinfo_dtl_cd = (String [])param.get("se_stdinfo_dtl_cd");					//log.debug("==== selectListGrid 3333333333333333-22222 ===="+param.get("se_stdinfo_dtl_cd"));				}				//log.debug("se_stdinfo_dtl_cd.length::=================="+se_stdinfo_dtl_cd.length);				for(int i=0;i<se_stdinfo_dtl_cd.length;i++){					log.debug("se_stdinfo_dtl_cd["+i+"]::=================="+se_stdinfo_dtl_cd[i]);					//log.debug("sh_stdinfo_dtl_cd::=================="+param.get("sh_stdinfo_dtl_cd")+":sh_stdinfo_dtl_cd:"+sh_stdinfo_dtl_cd.);				}				// 최종 선택 코드 셋팅 //마지막배열이 한개 추가되어 들어옴				if(se_stdinfo_dtl_cd.length==1){					final_se_stdinfo_dtl_cd = se_stdinfo_dtl_cd[0];				}else{					if(!HtmlTag.StripStrInXss(HtmlTag.returnString(se_stdinfo_dtl_cd[se_stdinfo_dtl_cd.length-1],"")).equals("")){						final_se_stdinfo_dtl_cd = se_stdinfo_dtl_cd[se_stdinfo_dtl_cd.length-1];											}else{						final_se_stdinfo_dtl_cd = se_stdinfo_dtl_cd[se_stdinfo_dtl_cd.length-2];											}				}								if(final_se_stdinfo_dtl_cd!=null){					if(final_se_stdinfo_dtl_cd.indexOf("__") > -1){						param.put("se_stdinfo_group_cd", final_se_stdinfo_dtl_cd.substring(0,final_se_stdinfo_dtl_cd.indexOf("__")));						final_se_stdinfo_dtl_cd = final_se_stdinfo_dtl_cd.substring(final_se_stdinfo_dtl_cd.lastIndexOf("__")+2);						param.put("se_stdinfo_dtl_cd", final_se_stdinfo_dtl_cd);											}else{						param.put("se_stdinfo_dtl_cd", final_se_stdinfo_dtl_cd);						param.put("se_stdinfo_group_cd","");					}									}							}						if(jqgrid_oper.indexOf("excel") > -1){				log.debug("exceldown::=================="+HtmlTag.returnString((String)param.get("excel_stdinfo_dtl_cd"),""));				String[] excel_stdinfo_dtl_cd = new String[0];				if( HtmlTag.returnString((String)param.get("excel_stdinfo_dtl_cd"),"").equals("")){					param.put("se_stdinfo_dtl_cd", HtmlTag.returnString((String)param.get("excel_stdinfo_dtl_cd"),""));				}else{					excel_stdinfo_dtl_cd = new String[HtmlTag.returnString((String)param.get("excel_stdinfo_dtl_cd"),"").split("__").length];					excel_stdinfo_dtl_cd = HtmlTag.returnString((String)param.get("excel_stdinfo_dtl_cd"),"").split("__");					log.debug("2exceldown::=================="+excel_stdinfo_dtl_cd[0]);					if(excel_stdinfo_dtl_cd.length == 1){						final_se_stdinfo_dtl_cd = excel_stdinfo_dtl_cd[0];						param.put("se_stdinfo_dtl_cd", final_se_stdinfo_dtl_cd);					}else{						final_se_stdinfo_dtl_cd = excel_stdinfo_dtl_cd[excel_stdinfo_dtl_cd.length-1];						log.debug("3exceldown::=================="+final_se_stdinfo_dtl_cd);						param.put("se_stdinfo_dtl_cd", final_se_stdinfo_dtl_cd);						}										}														}						if(SITE_SESSION!=null){				String ADMAUTH = "";				if(SITE_SESSION.get("ADMAUTH")==null){					ADMAUTH = "N";				}else{					ADMAUTH = (String)SITE_SESSION.get("ADMAUTH");				}								// 시스템 관리자 일경우				if(ADMAUTH.equals("Y")){					param.put("admauth", "Y");				// 일반 사용자의 경우 도서 직원일경우				}else{						param.put("admauth", "N");				}							}						if("A".equals((String)param.get("excelGbn"))){				param.put("all_fl", "ALL");				param.put("lim_lv", "");							}else{				if("".equals((String)param.get("se_stdinfo_dtl_cd"))){					param.put("all_fl", "ALL");					param.put("lim_lv", "1");					// 검색조건이 있으면					if(!"".equals(HtmlTag.returnString((String)param.get("sty"),""))){						param.put("all_fl", "ALL");						param.put("lim_lv", "");									}								}else{															//if(param.get("jqGrid.oper") == null){						param.put("all_fl", (String)param.get("se_stdinfo_dtl_cd"));					//}else{					//	final_se_stdinfo_dtl_cd = final_se_stdinfo_dtl_cd.substring(final_se_stdinfo_dtl_cd.lastIndexOf("__")+2);					//	param.put("all_fl", final_se_stdinfo_dtl_cd);					//}															param.put("lim_lv", "");					// 검색조건이 있으면					if(!"".equals(HtmlTag.returnString((String)param.get("sty"),""))){												param.put("lim_lv", "");									}								}							}												List rtn_list = new ArrayList();	  		rtn_list = list("JiCmCms.getCODESelect", param);	  		List gridList = cmsService.getGridListScroll(rtn_list);	  		result_map.put("rows",gridList);		}finally{		}		    	log.debug("==== selectListGrid End ====");		return result_map;	} 

	/**	* <p> ctlCMS(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	* @throws JSysException 	* @throws  	*/		// TODO : insertCode	public Map insertCode(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{
		log.debug("==== insertCode : START ====");		Map result_map = new HashMap();		Map query_param = new HashMap();		Map tmp_map = new HashMap();	    Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= "";	    if(SITE_SESSION.get("USER_ID")==null){	    	USER_ID			= "";	    }else{	    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));	    }	    String istdinfo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_cd"),""));// 코드그룹	    String istdinfo_dtl_uppo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_uppo_cd"),""));// 상위코드	    String istdinfo_dtl_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_cd"),""));// 등록코드	    int i = 0;	    int j = 0;	    int max_seq = 0;	    String max_code = "";	    int order_no = 0;		String sql = "";			try{			// 등록자 id 셋팅			param.put("user_id", USER_ID);			log.debug("000==>istdinfo_cd==>"+istdinfo_cd);			log.debug("000==>istdinfo_dtl_uppo_cd==>"+istdinfo_dtl_uppo_cd);			log.debug("000==>istdinfo_dtl_cd==>"+istdinfo_dtl_cd);			// 코드가 입력되지 않았으면 코드를 채번한다			if(istdinfo_dtl_cd.equals("")){				// 상위코드가 없으면 최상위 코드 이므로 코드를 채번하고				if(istdinfo_dtl_uppo_cd.equals("")){					//숫자로된 코드에서만 채번한다					//오라클, TIBERO					log.debug("11==>");					if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")							|| propertiesService.getString("CMS_DB_TYPE").equals("TIBERO")){						//tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 5, "^[A-Z]", "");						tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 5, "^[M][0-9]", "");						log.debug("11==>11==>");						max_code = (String)tmp_map.get("maxCode");						order_no = Integer.parseInt((String)tmp_map.get("maxOrder"),10);					//MSSQL					}else if(propertiesService.getString("CMS_DB_TYPE").equals("MSSQL")){						tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 5, "[A-Z]%", "");						log.debug("11==>22==>");						max_code = (String)tmp_map.get("maxCode");						order_no = Integer.parseInt((String)tmp_map.get("maxOrder"),10);					}					log.debug("11==>33==>max_code==>"+max_code);					param.put("istdinfo_cd", max_code);					param.put("istdinfo_dtl_uppo_cd", max_code);									// 최상위코드가 아닐경우 나머지에서 코드를 채번한다				}else{					//숫자로된 코드에서만 채번한다					//오라클, TIBERO					log.debug("22==>");					if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")							|| propertiesService.getString("CMS_DB_TYPE").equals("TIBERO")){						tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 6, "^[0-9]", istdinfo_dtl_uppo_cd);						log.debug("22==>11==>");						max_code = (String)tmp_map.get("maxCode");						order_no = Integer.parseInt((String)tmp_map.get("maxOrder"),10);					//MSSQL					}else if(propertiesService.getString("CMS_DB_TYPE").equals("MSSQL")){						tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 6, "[0-9]%", istdinfo_dtl_uppo_cd);						log.debug("22==>22==>");						max_code = (String)tmp_map.get("maxCode");						order_no = Integer.parseInt((String)tmp_map.get("maxOrder"),10);										}						log.debug("22==>33==>max_code==>"+max_code);					if(istdinfo_dtl_uppo_cd.indexOf("__") < 0){						param.put("istdinfo_dtl_uppo_cd", istdinfo_dtl_uppo_cd);					}else{						param.put("istdinfo_dtl_uppo_cd", istdinfo_dtl_uppo_cd.substring(istdinfo_dtl_uppo_cd.lastIndexOf("__")+2));					}									}										}else{				log.debug("33==>");				max_code = istdinfo_dtl_cd;				if(istdinfo_dtl_uppo_cd.equals("")){					param.put("istdinfo_cd", max_code);					param.put("istdinfo_dtl_uppo_cd", max_code);					order_no = Integer.parseInt(HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("iorder_no"),"0")),10);// 등록코드					log.debug("33==>11==>max_code==>"+max_code);				}else{					tmp_map = cmDAO.getMaxCode("JIT9101", "STDINFO_DTL_CD", 6, "^[0-9]", istdinfo_dtl_uppo_cd);					param.put("istdinfo_cd", istdinfo_cd);					log.debug("33==>22==>istdinfo_cd==>"+istdinfo_cd);					log.debug("33==>22==>istdinfo_dtl_uppo_cd==>"+istdinfo_dtl_uppo_cd);					if(istdinfo_dtl_uppo_cd.indexOf("__") < 0){						param.put("istdinfo_dtl_uppo_cd", istdinfo_dtl_uppo_cd);					}else{						param.put("istdinfo_dtl_uppo_cd", istdinfo_dtl_uppo_cd.substring(istdinfo_dtl_uppo_cd.lastIndexOf("__")+2));					}																				order_no = Integer.parseInt((String)tmp_map.get("maxOrder"),10);// 등록코드				}			}			//일련번호 추출			max_seq = cmDAO.getTableMaxSeq("JIT9101","STDINFO_DTL_SEQ","");			// 직접입력한 코드인경우 중복을 체크한다			if(!istdinfo_dtl_cd.equals("")){				sql = "JiCmCms.getCodeChk";				query_param = new HashMap();				query_param.put("max_code",max_code);				query_param.put("istdinfo_dtl_uppo_cd",istdinfo_dtl_uppo_cd);				query_param.put("mods","I");				//				if((Integer)getSqlMapClientTemplate().queryForObject(sql, query_param) > 0){				if(getInt(sql, query_param) > 0){					result_map.put("result",false);					result_map.put("TRS_MSG","코드가 중복되었습니다.");					//result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");					//result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));										throw new JSysException("코드가 중복되었습니다.");									}			}						// 코드를 등록한다			sql = "JiCmCms.insertCode";			param.put("istdinfo_dtl_seq", max_seq);			param.put("istdinfo_dtl_cd", max_code);			param.put("iorder_no", order_no);			insert(sql, param);			result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						
		}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> : ");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}
		log.debug("==== insertCode : END ====");
		return result_map;	
	}
	
	/**	* <p> ctlCMS(메인Dao컨트롤클래스)에서 해당데이터를 수정하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	* @throws JSysException 	* @throws  	*/		// TODO : updateCode
	public Map updateCode(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{
		log.debug("==== updateCode : START ====");		Map result_map = new HashMap();		Map query_param = new HashMap();		Map tmp_map = new HashMap();	    Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= "";	    if(SITE_SESSION.get("USER_ID")==null){	    	USER_ID			= "";	    }else{	    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));	    }	    String istdinfo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_cd"),""));// 코드그룹	    String istdinfo_dtl_uppo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_uppo_cd"),""));// 상위코드	    String istdinfo_dtl_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_cd"),""));// 등록코드	    String sidx  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("sidx"),""));// 등록코드	    String ORDER_NOh = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("ORDER_NOh"),""));// 원래순번	    String iorder_no = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("iorder_no"),""));// 수정순번	    String istdinfo_dtl_cd_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_cd_nm"),""));// 수정순번	    String istdinfo_dtl_label = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_label"),""));// 수정순번	    	    int i = 0;	    int j = 0;	    int max_seq = 0;	    String max_code = "";	    int order_no = 0;		String sql = "";			try{			// 등록자 id 셋팅			param.put("user_id", USER_ID);			// 필수 입력값체크			if(sidx.equals("")){				result_map.put("result",false);				result_map.put("TRS_MSG","필수입력값이 입력되지않았습니다");				result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));									//throw new JSysException("코드가 중복되었습니다.");				return result_map;							}			// 코드가 입력된경우 중복을 체크한다			if(!istdinfo_dtl_cd.equals("")){				sql = "JiCmCms.getCodeChk";				query_param = new HashMap();				query_param.put("max_code",istdinfo_dtl_cd);				query_param.put("istdinfo_dtl_uppo_cd",istdinfo_dtl_uppo_cd);				query_param.put("mods","U");				query_param.put("sidx",sidx);//				if((Integer)getSqlMapClientTemplate().queryForObject(sql, query_param) > 0){				if(getInt(sql, query_param) > 0){					result_map.put("result",false);					result_map.put("TRS_MSG","코드가 중복되었습니다.");					result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");					result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));										//throw new JSysException("코드가 중복되었습니다.");					return result_map;				}			}							// 만일 정렬 순번을 수정한경우 순번값을 조정해 준다			if(!ORDER_NOh.equals(iorder_no)){				// 원래 순번이 빠지면 원래 순번보다 큰순번의 데이터들은 -1을 해준다				sql = "JiCmCms.updateDelCode";				query_param = new HashMap();				query_param.put("sel_up_code",istdinfo_dtl_uppo_cd);				query_param.put("ORDER_NOh",ORDER_NOh);								update(sql, query_param);				// 수정될순번과 같거나 큰번호는 증가				sql = "JiCmCms.updateUpCode";				query_param = new HashMap();				query_param.put("sel_up_code",istdinfo_dtl_uppo_cd);				query_param.put("ORDER_NO_M",iorder_no);								update(sql, query_param);								// 수정될 순번보다 작은 번호는 변동없음			}										// 코드를 수정한다			sql = "JiCmCms.updateCode";			param.put("istdinfo_dtl_cd", istdinfo_dtl_cd);			param.put("istdinfo_dtl_cd_nm", istdinfo_dtl_cd_nm);			param.put("istdinfo_dtl_label", istdinfo_dtl_label);			param.put("iorder_no", iorder_no);			update(sql, param);			result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");			}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> : ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}
		log.debug("==== updateCode : END ====");
		return result_map;	
	}		/**	* <p> ctlCMS(메인Dao컨트롤클래스)에서 해당데이터를 수정하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	* @throws JSysException 	* @throws  	*/		// TODO : deleteCode	public Map deleteCode(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== deleteCode : START ====");		Map result_map = new HashMap();		Map query_param = new HashMap();		Map tmp_map = new HashMap();	    Map SITE_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= "";	    if(SITE_SESSION.get("USER_ID")==null){	    	USER_ID			= "";	    }else{	    	USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_SESSION.get("USER_ID"),""));	    }	    String istdinfo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_cd"),""));// 코드그룹	    String istdinfo_dtl_uppo_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_uppo_cd"),""));// 상위코드	    String istdinfo_dtl_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_cd"),""));// 등록코드	    String sidx  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("sidx"),""));// 등록코드	    String ORDER_NOh = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("ORDER_NOh"),""));// 원래순번	    String iorder_no = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("iorder_no"),""));// 수정순번	    String istdinfo_dtl_cd_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_cd_nm"),""));// 수정순번	    String istdinfo_dtl_label = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("istdinfo_dtl_label"),""));// 수정순번	    	    int i = 0;	    int j = 0;	    int max_seq = 0;	    String max_code = "";	    int order_no = 0;		String sql = "";			try{			// 등록자 id 셋팅			param.put("user_id", USER_ID);			// 필수 입력값체크			if(sidx.equals("")){				result_map.put("result",false);				result_map.put("TRS_MSG","필수입력값이 입력되지않았습니다");				result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_FAILURE"));									//throw new JSysException("코드가 중복되었습니다.");				return result_map;							}						// 만일 정렬 순번을 수정한경우 순번값을 조정해 준다			//if(!ORDER_NOh.equals(iorder_no)){				// 원래 순번이 빠지면 원래 순번보다 큰순번의 데이터들은 -1을 해준다				sql = "JiCmCms.updateDelCode";				query_param = new HashMap();				query_param.put("sel_up_code",istdinfo_dtl_uppo_cd);				query_param.put("ORDER_NOh",ORDER_NOh);								update(sql, query_param);						// 수정될 순번보다 작은 번호는 변동없음			//}										// 코드를 하위코드까지 삭제한다			sql = "JiCmCms.deleteCode";			param.put("sidx", sidx);			update(sql, param);						result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> : ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== deleteCode : END ====");		return result_map;		}	
	
	/**	* <p> ctlCMS(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*
	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	* @throws JSysException 	* @throws  	*/		// TODO : selectExcelInsert	public Map selectExcelInsert(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== selectExcelInsert : START ====");		Map result_map = new HashMap();		Map temp_file = new HashMap();		Map tmp_map = new HashMap();		Map rtn_map = new HashMap();		Iterator iterator;		Map temp_excel_row = new HashMap();		String fileSaveName="";		String sql = "";		int i = 0;		String uploadrealpath = "";		String matr_seqno = "";		String chk_cycl_250_qty = "";		String chk_cycl_500_qty = "";		String chk_cycl_1000_qty = "";		String chk_cycl_md_qty = "";		String chk_cycl_oh_qty = "";	    Map SITE_ADM_SESSION	= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		
		try{			List file_arr	= (List)param.get("FILE_ARR");// 업로드 파일정보			if(file_arr!=null){
				for(i=0;i<file_arr.size();i++){
					temp_file = (Map)file_arr.get(i);
					/*mapdf2.put("fileformName",fieldName);					mapdf2.put("fileName",filename);					mapdf2.put("maskName",curdate+"_"+code+"_"+i+"."+filenameext);					mapdf2.put("fileSize",sizeInBytes);					mapdf2.put("cnt",Integer.toString(file_group_cnt));*/					if(((String)temp_file.get("fileformName")).equals("excel_file")){						fileSaveName=(String)temp_file.get("maskName");					}				}			}	
			uploadrealpath = propertiesService.getString("UPLOADROOTPATH")+"/"+param.get("pcode")+"/"+fileSaveName.substring(0,8)+"/"+fileSaveName;
			File xlsxFile = new File(uploadrealpath);			// 파일이 없는경우			if(!xlsxFile.exists()){				log.debug("++++ 파일이 존재하지 않습니다. ++++");				throw new JSysException("업로드된 엑셀파일이 존재하지 않습니다.");			}
			//############### 엑셀파일 파싱 #########################	        List excellist=CM_Util.readExcel(xlsxFile, 0, 2, 17); // 파일, 몇번째 sheet, 로우 시작시점(0), 셀갯수(0~9까지))	        //############### 엑셀파일 파싱 #########################			
	        // 업로드된 데이터를 확인하면서 데이터를 업데이트 처리한다	        for(i=0;i<excellist.size();i++){	        	temp_excel_row = (Map)excellist.get(i);				iterator = temp_excel_row.entrySet().iterator();
				  while (iterator.hasNext()) {					   Entry entry = (Entry)iterator.next();					   //log.debug(entry.getKey().toString()+"====>"+temp_excel_row.get(entry.getKey()));					   if(entry.getKey().toString().equals("1")){						   matr_seqno = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"");					   }
					   if(entry.getKey().toString().equals("11")){						   if(temp_excel_row.get(entry.getKey()) instanceof Double){							   chk_cycl_250_qty = Double.toString(((Double)temp_excel_row.get(entry.getKey())).doubleValue());						   }else{							   chk_cycl_250_qty = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"0");						   }					   }
					   if(entry.getKey().toString().equals("12")){						   if(temp_excel_row.get(entry.getKey()) instanceof Double){							   chk_cycl_500_qty = Double.toString(((Double)temp_excel_row.get(entry.getKey())).doubleValue());						   }else{							   chk_cycl_500_qty = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"0");						   }						   					   }
					   if(entry.getKey().toString().equals("13")){						   if(temp_excel_row.get(entry.getKey()) instanceof Double){							   chk_cycl_1000_qty = Double.toString(((Double)temp_excel_row.get(entry.getKey())).doubleValue());						   }else{							   chk_cycl_1000_qty = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"0");						   }						   					   }
					   if(entry.getKey().toString().equals("14")){						   if(temp_excel_row.get(entry.getKey()) instanceof Double){							   chk_cycl_md_qty = Double.toString(((Double)temp_excel_row.get(entry.getKey())).doubleValue());						   }else{							   chk_cycl_md_qty = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"0");						   }						   					   }
					   if(entry.getKey().toString().equals("15")){						   if(temp_excel_row.get(entry.getKey()) instanceof Double){							   chk_cycl_oh_qty = Double.toString(((Double)temp_excel_row.get(entry.getKey())).doubleValue());						   }else{							   chk_cycl_oh_qty = HtmlTag.returnString((String)temp_excel_row.get(entry.getKey()),"0");						   }						   					   }					   				  }				  //log.debug("matr_seqno:"+matr_seqno);				  //log.debug("chk_cycl_250_qty:"+chk_cycl_250_qty);				  //log.debug("chk_cycl_500_qty:"+chk_cycl_500_qty);				  //log.debug("chk_cycl_1000_qty:"+chk_cycl_1000_qty);				  //log.debug("chk_cycl_md_qty:"+chk_cycl_md_qty);				  //log.debug("chk_cycl_oh_qty:"+chk_cycl_oh_qty);   		        	// 자재코드 형식을 확인한다	        	if(matr_seqno.equals("") || matr_seqno.length()>12){	        		log.debug("matr_seqno:"+matr_seqno);	        		throw new JSysException((i+1)+"번째 데이터의 자재코드가 형식과 일치하지 않습니다.!!");	        	}
	        	// 실재로 존재하는 자재코드 인지 확인한다				sql = "mpMmmDAO.getMatr_SeqnoChk";				tmp_map = new HashMap();				//tmp_map.put("imatr_seqno", imatr_seqno);				tmp_map.put("matr_seqno", matr_seqno);
				rtn_map = cmDAO.getformData (tmp_map ,sql);				if(Integer.parseInt((String)((Map)rtn_map.get("ViewMap")).get("chkcnt")) == 0){					throw new JSysException((i+1)+"번째 데이터의 자재코드가 존재하지않는 자재코드입니다.!!");				}   				// 해당자재마스터의 예방점검 1회교체 수량을 수정처리한다				sql = "mpMmmDAO.updateChk_Cycl";				tmp_map = new HashMap();				tmp_map.put("matr_seqno", matr_seqno);				tmp_map.put("chk_cycl_250_qty", chk_cycl_250_qty);				tmp_map.put("chk_cycl_500_qty", chk_cycl_500_qty);				tmp_map.put("chk_cycl_1000_qty", chk_cycl_1000_qty);				tmp_map.put("chk_cycl_md_qty", chk_cycl_md_qty);				tmp_map.put("chk_cycl_oh_qty", chk_cycl_oh_qty);				tmp_map.put("user_id", USER_ID);	        	update(sql, tmp_map);
	        }
			result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");		
		}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> : ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}
		log.debug("==== selectExcelInsert : END ====");
		return result_map;	
	} 

	/**	* <p>  자재의 엔진모델을 정비(설비)에서 사용하는 모델로 매핑하는 메소드 </p>	* Precondition : 	* Postcondition: 자재의 이동호기 엔진모델을 정비(설비)에서 사용하는 모델로 매핑하는 맵을 리턴한다	*	* @param   	*	* @return  자재의 엔진모델을 정비(설비)에서 사용하는 모델로 매핑하는 맵을 리턴한다	* @throws JSysException 	* @throws  	*/		// TODO : selectMpGm_Gen_Model_Mapping	public Map selectMpGm_Gen_Model_Mapping() throws JSysException, Exception{		log.debug("==== selectMpGm_Gen_Model_Mapping : START ====");		Map result_map = new HashMap();
		try{			result_map.put("501", "030");			result_map.put("502", "030");			result_map.put("503", "030");			result_map.put("504", "031");			result_map.put("505", "031");			result_map.put("506", "032");			result_map.put("507", "032");			result_map.put("508", "032");			result_map.put("509", "033");			result_map.put("510", "033");			result_map.put("511", "034");			result_map.put("512", "038");			result_map.put("513", "038");			result_map.put("514", "038");			}catch(JSysException q){				log.debug("throw JSysException >>>>> : ");				throw q;			
		}catch(Exception q){							log.debug("JSysException Exception >>>>> : ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.
		}		
		log.debug("==== selectMpGm_Gen_Model_Mapping : END ====");		return result_map;				}}