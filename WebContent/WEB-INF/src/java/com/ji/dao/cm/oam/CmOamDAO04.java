package com.ji.dao.cm.oam;import java.util.HashMap;import java.util.Map;import java.util.Random;import java.util.regex.Pattern;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ibatis.sqlmap.client.SqlMapClient;import com.ji.cm.SendEmail;import com.ji.cm.SendSms;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.common.JasyptUtil;import com.ji.common.StringUtil;import com.ji.dao.cm.CMDAO;import com.ji.dao.cm.mnm.CmMnmDAO01;import com.ji.dao.cm.mtm.CmMtmDAO01;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.web.MyPageController;import egovframework.rte.fdl.property.EgovPropertyService;/**   * @Class Name : cmOamDAO04.java * @Description : cmOamDAO03 DAO Class  * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2016.11.08          최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2016.11.08 * @version 1.0 * @see *  */@Repository("cmOamDAO04")public class CmOamDAO04 extends CmsDsDao {	protected Logger log = Logger.getLogger(CmOamDAO04.class); //현재 클래스 이름을 Logger에 등록	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;        @Resource(name="cmMtmDAO01")    private CmMtmDAO01 cmMtmDAO01;            /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;    /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;    	/** cmDAO */    @Resource(name="cmMnmDAO01")    private CmMnmDAO01 cmMnmDAO01;        /** sendEmail */    @Resource(name="sendEmail")    private SendEmail sendEmail;	//메일발송        /** sendSms */    @Resource(name="sendSms")    private SendSms sendSms;		//문자발송           /** jasyptUtil */     @Resource(name = "jasyptUtil")    private JasyptUtil JasyptUtil;           @Resource(name = "sqlMapClient")    private SqlMapClient sqlMapClient;        /***** 사업자번호체크 20200130 *******/    public static boolean CompNumber(String comp){    	if(comp.length() !=10) return false;    	return checkCompNumber(comp);    }        public static boolean checkCompNumber(String compNumber){    	int hap = 0;    	int temp = 0;    	int check[] = {1,3,7,1,3,7,1,3,5}; //사업자번호 유효성 체크 필요한 수    	    	if(compNumber.length() != 10) return false;    	    	for (int i=0; i<9; i++){    		if(compNumber.charAt(i) < '0' || compNumber.charAt(i) > '9') // 숫자가 아닌 값이 들어왔는지를 확인     			return false;    		    		hap = hap + (Character.getNumericValue(compNumber.charAt(i)) * check[temp]); //검증식 적용    		temp++;    	}    	hap += (Character.getNumericValue(compNumber.charAt(8))*5)/10;    	    	if ((10 - (hap%10))%10 == Character.getNumericValue(compNumber.charAt(9)))    		return true;    	else     		return false;    }    /***** 사업자번호체크 20200130 *******/        /**	 * 로그인, 회원가입, 아이디찾기, 비밀번호찾기 메소드	 * @param Map	 * @return Map	 * @exception Exception	 */    // TODO : ctlCMS    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws Exception {		log.debug("==== ctlCMS Start ====");		Map tmp_map  = new HashMap();		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");		String pcode = HtmlTag.returnString((String)param.get("pcode"),"");		int max_seq = 0;				try{						/*			 * L      :  사용자 약관동의			 * CK		: 아이디 중복체크			 * C		: 등록	 			 * L5		: 등록완료(회원정보)			 * FI		: 아이디찾기			 * FP		: 비밀번호 찾기			 */						// TODO : pcode: 000138 회원가입일경우			if(pcode.equals("000138")){								if(pstate.equals("L")){								// TODO : pstate : CK				}else if(pstate.equals("CK")){					String user_id = HtmlTag.returnString((String)param.get("user_id"),"");	//아이디					boolean check = CompNumber(user_id);					if(!check){						throw new JSysException("사업자 등록번호가 올바르지 않습니다.");					}					int cnt = (Integer) sqlMapClient.queryForObject("JiCmOam.getCheckUserId", param);					result_map.put("cnt", String.valueOf(cnt));				// TODO : pstate : C					}else if(pstate.equals("C")){					Map SITE_AUTH_SESSION = (Map)param.get(propertiesService.getString("SITE_AUTH_SESSION_FN"));//					if(SITE_AUTH_SESSION==null){//						throw new JSysException("정상적으로 본인인증이 되지않았습니다");//					}else{//						if(SITE_AUTH_SESSION.get("sName")==null){//							throw new JSysException("정상적으로 본인인증이 되지않았습니다");//						}//					}					/***** 사업자번호체크 20200130 shin1 *******/										String sesseionBizNum = (String) param.get(MyPageController.BIZNUM_SESSION_KEY);					String user_id = HtmlTag.returnString((String)param.get("user_id"),"");	//아이디					log.debug("shinDAO8888>>>>"+sesseionBizNum);					boolean check = checkCompNumber(user_id);					if(!check){						throw new JSysException("사업자 등록번호가 올바르지 않습니다.");					}//					if(!StringUtil.isEmpty(sesseionBizNum)) {//						log.debug("shinDAO9999안비어있어~~>>>>");//						if(!sesseionBizNum.equals(user_id)) {//							log.debug("shinDAO10101010 달라 꺼져~~>>>>");//							throw new JSysException("비정상적인 접근입니다.");//						}//					}										/***** 사업자번호체크 20200130 *******/										String password = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("password"),""));					// db암호화 적용					//param.put("login_passwd", JasyptUtil.encSHA256(password));					param.put("login_passwd", password);										//패스워드 정규식체크			    	String pwdPattern = "^(?=.*[A-Za-z])(?=.*[0-9])(?=.*[$@$!%*#?&])[A-Za-z[0-9]$@$!%*#?&]{9,12}$";			    	boolean pwdCheck = Pattern.matches(pwdPattern, password);			    				    	if(!pwdCheck){ 			    		throw new JSysException("비밀번호는 영문,숫자,특수문자 조합으로 9~12자리로 사용해야합니다.");			    	}										// 본인인증값 셋팅					param.put("user_nm", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sName"),""));					param.put("sDupInfo", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sDupInfo"),""));					param.put("brthdy", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sBirthDate"),""));					param.put("sAuthType", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sAuthType"),""));					param.put("sVNumber", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sVNumber"),""));					String sMobileNo = HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sMobileNo"),"");					if(!sMobileNo.equals("")){						if(sMobileNo.length()==11){							param.put("sMobileNo", sMobileNo.substring(0,3)+"-"+sMobileNo.substring(3,7)+"-"+sMobileNo.substring(7,11));						}else if(sMobileNo.length()==10){							param.put("sMobileNo", sMobileNo.substring(0,3)+"-"+sMobileNo.substring(3,6)+"-"+sMobileNo.substring(6,10));						}else{							param.put("sMobileNo", "");						}											}															//회원정보 입력					max_seq = cmDAO.getTableMaxSeq("JIT9111","USER_SEQNO","");					param.put("user_seqno", max_seq);					insert("JiCmOam.insertUserInfo", param);					// 해피콜제공여부 체크					if("Y".equals(param.get("happycl_provd_at"))){											}					// 메일수신여부 체크					if("Y".equals(param.get("email_recptn_at"))){											}					// SMS 수신여부 체크					if("Y".equals(param.get("sms_recptn_at"))){					}										result_map.put("user_id", HtmlTag.returnString((String)param.get("user_id"),""));					result_map.put("user_nm", HtmlTag.returnString((String)param.get("user_nm"),""));										result_map.put("user_seqno", max_seq+"");					result_map.put("result", true);					result_map.put("TRS_MSG", "");									// TODO : pstate : L4	개인정보입력 화면				}else if(pstate.equals("L4")){					// 임시로 본인인증 세션값을 셋팅한다					Map SITE_AUTH_SESSION = (Map)param.get(propertiesService.getString("SITE_AUTH_SESSION_FN"));//					if(SITE_AUTH_SESSION==null){//						throw new JSysException("정상적으로 본인인증이 되지않았습니다");//					}else{//						if(SITE_AUTH_SESSION.get("sName")==null){//							throw new JSysException("정상적으로 본인인증이 되지않았습니다");//						}//					}					if(null != SITE_AUTH_SESSION) {						param.put("sDupInfo",HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sDupInfo"),""));						log.debug("sDupInfo >>>>"+param.get("sDupInfo"));						// 중복체크						int cnt = (Integer) sqlMapClient.queryForObject("JiCmOam.getCheckDupInfo", param);						if(cnt > 0){							throw new JSysException("이미 가입된 정보입니다");						}						result_map.put("cnt", String.valueOf(cnt));					}										result_map.put("tel_cd_opts",cmDAO.bizMakeOptionListText("M00008", ""));	//전화번호					result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화					result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//메일주소				// TODO : pstate : L5					}else if(pstate.equals("L5")){										String user_nm = HtmlTag.returnString((String)param.get("user_nm"),"");	//성명					String user_id = HtmlTag.returnString((String)param.get("user_id"),"");	//아이디					String email = HtmlTag.returnString((String)param.get("email"),"");	//이메일										String user_seqno = HtmlTag.returnString((String)param.get("user_seqno"),"");	//아이디					String grp_nm = HtmlTag.returnString((String)param.get("grp_nm"),"");	//이메일										//첨부파일 등록					param.put("ikey_datas", user_seqno);					param.put("imenu_data_title", grp_nm); //데이터명 입력					cmMtmDAO01.InsertFile(param); //첨부파일 등록 실행															log.debug("===== CmOamDAO04 이메일발송 시작 =====");										Map param_email = new HashMap();					String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템					String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털					String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다					String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다					String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일					String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");					String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));															String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");					String mailto = email;					String mailto_nm = user_nm+"님";						String rname = "관리자";										String subject = "["+system_name+"] 홈페이지 가입을 축하드립니다.";					String emailTitle = "["+system_name+"] 가입을 축하드립니다.";					String emailContent = "신청인 : "+user_nm+"<br/>아이디 : "+user_id;															emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);					emailForm = emailForm.replace("{제목}", emailTitle);					//emailForm = emailForm.replace("{내용}", emailContent);					// 내용 제목과 동일하게 넣어달라는 현업요구 반영					emailForm = emailForm.replace("{내용}", emailContent);																				emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"							,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));															param_email.put("subject", subject);							//제목					param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일					param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일					param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***					param_email.put("gubun", gubun);								//발송시스템명					param_email.put("rname", rname);								//담당자명					param_email.put("content", emailForm);						//내용																											param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용					param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String) param.get("ikey_datas"),""));					param_email.put("ORDER_NO", "1");					param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);					param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));					param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));					param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));					param_email.put("TO_USER_TY", "2");											if(!HtmlTag.returnString(mailto,"").equals("")){ 						sendEmail.start(param_email);					}										log.debug("===== CmOamDAO04 이메일발송 끝 =====");														}							// TODO : pcode : 000254 아이디찾기 - 아이디찾기는 결과화면에 성명과 아이디를 보여준다			}else if(pcode.equals("000254")){								result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//메일주소								/*				 * FJ	: 회원정보로찾기				 * FH	: 휴대폰본인인증				 * FH	: 아이핀				 * AU	: 인증번호발송				 */				// TODO : pstate : FJ				if(pstate.equals("FJ")){					if(pcode.equals("000254") || pcode.equals("000255")){						param.put("chkyn", "Y");					}else{						param.put("chkyn", "N");					}										// 휴대폰번호 인증					if("0".equals(param.get("find_type"))){										tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);												if(tmp_map != null){							result_map = getSelectByPk("JiCmOam.selectUserInfo", param);							result_map.put("result", true);													//메일발송							Map param_email = new HashMap();							String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템							String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털							String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다							String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다							String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일							String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");							String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));																					String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");							String mailto = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("email")));							String mailto_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_nm")));							String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_id")));										String emailSubject = "["+system_name+"] 아이디 찾기 결과입니다.";							String emailTitle = "["+system_name+"] 아이디 찾기 결과입니다.";							String emailContent = mailto_nm+"님 의 아이디는<br><b>"+user_id+"</b>입니다.";																					emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);							emailForm = emailForm.replace("{제목}", emailTitle);							//emailForm = emailForm.replace("{내용}", emailContent);							// 내용 제목과 동일하게 넣어달라는 현업요구 반영							emailForm = emailForm.replace("{내용}", emailContent);																										emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"									,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));																					param_email.put("subject", emailSubject);							//제목							param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일							param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일							param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***							param_email.put("gubun", gubun);								//발송시스템명							param_email.put("rname", "관리자");								//담당자명							param_email.put("content", emailForm);						//내용																																					param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용							param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String) result_map.get("user_seqno"),""));							param_email.put("ORDER_NO", "1");							param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);							param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));							param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));							param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));							param_email.put("TO_USER_TY", "2");																						if(!HtmlTag.returnString(mailto,"").equals("")){ 								sendEmail.start(param_email);							}																				}else{							result_map.put("result", false);							result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");													}											// 이메일 인증					}else if("1".equals(param.get("find_type"))){												tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);												if(tmp_map != null){							result_map = getSelectByPk("JiCmOam.selectUserInfo", param);							result_map.put("result", true);														//메일발송							Map param_email = new HashMap();							String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템							String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털							String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다							String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다							String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일							String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");							String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));																					String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");							String mailto = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("email")));							String mailto_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_nm")));							String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_id")));										String emailSubject = "["+system_name+"] 아이디 찾기 결과입니다.";							String emailTitle = "["+system_name+"] 아이디 찾기 결과입니다.";							String emailContent = mailto_nm+"님의 아이디는<br>"+user_id+"입니다.";																					emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);							emailForm = emailForm.replace("{제목}", emailTitle);							//emailForm = emailForm.replace("{내용}", emailContent);							// 내용 제목과 동일하게 넣어달라는 현업요구 반영							emailForm = emailForm.replace("{내용}", emailContent);																										emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"									,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));																					param_email.put("subject", emailSubject);							//제목							param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일							param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일							param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***							param_email.put("gubun", gubun);								//발송시스템명							param_email.put("rname", "관리자");								//담당자명							param_email.put("content", emailForm);						//내용																																					param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용							param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String) result_map.get("user_seqno"),""));							param_email.put("ORDER_NO", "1");							param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);							param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));							param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));							param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));							param_email.put("TO_USER_TY", "2");																					if(!HtmlTag.returnString(mailto,"").equals("")){ 								sendEmail.start(param_email);							}													}else{							result_map.put("result", false);							result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");													}					}									// TODO : pstate : FH 본인인증, 아이핀인증				}else if(pstate.equals("FH")){					log.debug("======== CmOamDAO04 ctlCMS FH Start  ========");					// 사용자 등록화면					Map SITE_AUTH_SESSION = (Map)param.get(propertiesService.getString("SITE_AUTH_SESSION_FN"));				    	// 로그인 없이 글등록시 본인인증한값 체크						if(SITE_AUTH_SESSION==null){							throw new JSysException("정상적으로 본인인증이 되지않았습니다");						}else{							if(SITE_AUTH_SESSION.get("sName")==null){								throw new JSysException("정상적으로 본인인증이 되지않았습니다");							}else{								log.debug("session chk 2======================");					    		param.put("SITE_AUTH_SESSION", SITE_AUTH_SESSION);					    		param.put("sDupInfo", HtmlTag.returnString((String)SITE_AUTH_SESSION.get("sDupInfo"),"NONE"));							}				    	}														tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);					if(tmp_map != null){						result_map = getSelectByPk("JiCmOam.selectUserInfo", param);						result_map.put("result", true);												//메일발송						Map param_email = new HashMap();						String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템						String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털						String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다						String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다						String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일						String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");						String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));																		String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");						String mailto = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("email")));						String mailto_nm = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_nm")));						String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) result_map.get("user_id")));								String emailSubject = "["+system_name+"] 아이디 찾기 결과입니다.";						String emailTitle = "["+system_name+"] 아이디 찾기 결과입니다.";						String emailContent = mailto_nm+"님의 아이디는<br>"+user_id+"입니다.";																		emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);						emailForm = emailForm.replace("{제목}", emailTitle);						//emailForm = emailForm.replace("{내용}", emailContent);						// 내용 제목과 동일하게 넣어달라는 현업요구 반영						emailForm = emailForm.replace("{내용}", emailContent);																							emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"								,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));																		param_email.put("subject", emailSubject);							//제목						param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일						param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일						param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***						param_email.put("gubun", gubun);								//발송시스템명						param_email.put("rname", "관리자");								//담당자명						param_email.put("content", emailForm);						//내용																																param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용						param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String) result_map.get("user_seqno"),""));						param_email.put("ORDER_NO", "1");						param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);						param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));						param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));						param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));						param_email.put("TO_USER_TY", "2");																			if(!HtmlTag.returnString(mailto,"").equals("")){ 							sendEmail.start(param_email);						}											}else{						result_map.put("result", false);						result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");																	}									// TODO : pstate : AU 인증번호 발송				}else if(pstate.equals("AU")){					log.debug("======== CmOamDAO04 ctlCMS AU Start  ========");					if(pcode.equals("000254") || pcode.equals("000255")){						param.put("chkyn", "Y");					}else{						param.put("chkyn", "N");					}										log.debug("chkyn11111111111==================>"+param.get("chkyn"));										tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);					String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템					String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털										if(tmp_map != null){												//인증번호 랜덤생성						String authCode = StringUtil.rpad(StringUtil.javaRandom(1000, 9999)+"", 4, "0");												//휴대폰번호로 인증번호 발송						Map param_sms = new HashMap();						String tran_phone = (String)param.get("moblphon1")+(String)param.get("moblphon2")+(String)param.get("moblphon3");						String tran_msg = "["+system_name+"] 고객님의 아이디찾기 인증번호는["+authCode+"]입니다.";						String tran_etc1 = gubun;						String tran_etc2 = "관리자";						String tran_etc3 = "02-6445-5367";												param_sms.put("tran_phone", tran_phone);	//수신번호(숫자만)						param_sms.put("tran_callback", tran_etc3);	//발송번호						param_sms.put("tran_msg", tran_msg);		//내용						param_sms.put("tran_etc1", tran_etc1);		//발송시스템명						param_sms.put("tran_etc2", tran_etc2);		//담당자명						param_sms.put("tran_etc3", tran_etc3.replaceAll("-", ""));		//담당자연락처(숫자만)						if(!HtmlTag.returnString((String)param_sms.get("tran_phone"),"").equals("")){ 							sendSms.start(param_sms);						}															log.debug("chkyn==================>"+param.get("chkyn"));												//인증번호 업데이트						param.put("authcode", authCode);						update("JiCmOam.updateAuthCode", param);												result_map.put("result", true);						result_map.put("TRS_MSG", "인증번호가 발송되었습니다.");											}else{						result_map.put("result", false);						result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");											}				}							// TODO : pcode : 000255 비밀번호 찾기 - 비밀번호 찾기는 임시비밀번호로 업데이트후 이메일로 발송한다. 			}else if(pcode.equals("000255")){								result_map.put("mob_cd_opts",cmDAO.bizMakeOptionListText("M00009", ""));	//휴대전화				result_map.put("mail_cd_opts",cmDAO.bizMakeOptionListLabel("M00004", ""));	//메일주소								/*				 * FPJ		: 회원정보로찾기				 * FI		: 휴대폰본인인증				 * FI		: 아이핀				 */				// TODO : pstate : FPJ				if(pstate.equals("FPJ")){					if(pcode.equals("000254") || pcode.equals("000255")){						param.put("chkyn", "Y");					}else{						param.put("chkyn", "N");					}						// 휴대폰번호 인증 					if("0".equals(param.get("find_type"))){												tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);												if(tmp_map != null){														//비밀번호 랜덤생성해서 업데이트							String password = StringUtil.getRandomPassword(10);							//log.debug("======== CmOamDAO04 ctlCMS FI Start ========"+password);							// db암호화로 변경							//param.put("login_passwd", JasyptUtil.encSHA256(password));							param.put("login_passwd", password);							update("JiCmOam.updateLoginIpns", param);														log.debug("======== CmOamDAO04 ctlCMS FI 111111111111 ========"+password);							//임시비밀번호 이메일로 발송							Map param_email = new HashMap();							String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템							String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털							String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다							String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다							String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일							String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");							String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));							log.debug("======== CmOamDAO04 ctlCMS FI 2222222222 ========"+password);														String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");							String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) tmp_map.get("userId"),""));										String mailto = HtmlTag.returnString((String)tmp_map.get("email"),"");							String mailto_nm = HtmlTag.returnString((String)tmp_map.get("userNm"),"")+"님";							String rname = "관리자";														String emailSubject = "["+system_name+"] 비밀번호찾기 결과입니다.";							String emailTitle = "["+system_name+"] 비밀번호찾기 결과입니다.";							String emailContent = mailto_nm+"의 임시비밀번호는<br/><b>"+password+"</b> 입니다<br>로그인후 비밀번호를 변경해주시기 바랍니다.";														log.debug("======== CmOamDAO04 ctlCMS FI 3333333 ========"+password);							emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);							emailForm = emailForm.replace("{제목}", emailTitle);							//emailForm = emailForm.replace("{내용}", emailContent);							// 내용 제목과 동일하게 넣어달라는 현업요구 반영							emailForm = emailForm.replace("{내용}", emailContent);																										emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"									,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));							log.debug("======== CmOamDAO04 ctlCMS FI 44444444444 ========"+password);														param_email.put("subject", emailSubject);							//제목							param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일							param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일							param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***							param_email.put("gubun", gubun);								//발송시스템명							param_email.put("rname", "관리자");								//담당자명							param_email.put("content", emailForm);						//내용																					log.debug("======== CmOamDAO04 ctlCMS FI 5555555555555555555 ========"+password);															param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용							param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String)tmp_map.get("userSeqno"),""));							param_email.put("ORDER_NO", "1");							param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);							param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));							param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));							param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));							param_email.put("TO_USER_TY", "2");								log.debug("======== CmOamDAO04 ctlCMS FI 51111111111111111111111 ========"+password);							if(!HtmlTag.returnString(mailto,"").equals("")){ 								sendEmail.start(param_email);							}							log.debug("======== CmOamDAO04 ctlCMS FI 66666666666666666666 ========"+password);							result_map.put("result", true);							result_map.put("TRS_MSG", "이메일로 발송되었습니다.");						}else{							result_map.put("result", false);							result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");						}											// 이메일 인증					}else if("1".equals(param.get("find_type"))){												tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);												if(tmp_map != null){														//비밀번호 랜덤생성해서 업데이트							String password = StringUtil.getRandomPassword(10);							//log.debug("======== CmOamDAO04 ctlCMS FI Start ========"+password);							// db암호화로 변경							//param.put("login_passwd", JasyptUtil.encSHA256(password));							param.put("login_passwd", password);							update("JiCmOam.updateLoginIpns", param);														//임시비밀번호 이메일로 발송							Map param_email = new HashMap();							String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템							String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털							String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다							String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다							String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일							String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");							String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));																					String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");							String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) tmp_map.get("userId"),""));										String mailto = HtmlTag.returnString((String)tmp_map.get("email"),"");							String mailto_nm = HtmlTag.returnString((String)tmp_map.get("userNm"),"")+"님";							String rname = "관리자";														String emailSubject = "["+system_name+"] 비밀번호찾기 결과입니다.";							String emailTitle = "["+system_name+"] 비밀번호찾기 결과입니다.";							String emailContent = mailto_nm+"의 임시비밀번호는<br/><b>"+password+"</b> 입니다<br>로그인후 비밀번호를 변경해주시기 바랍니다.";																					emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);							emailForm = emailForm.replace("{제목}", emailTitle);							//emailForm = emailForm.replace("{내용}", emailContent);							// 내용 제목과 동일하게 넣어달라는 현업요구 반영							emailForm = emailForm.replace("{내용}", emailContent);																										emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"									,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));																					param_email.put("subject", emailSubject);							//제목							param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일							param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일							param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***							param_email.put("gubun", gubun);								//발송시스템명							param_email.put("rname", "관리자");								//담당자명							param_email.put("content", emailForm);						//내용																																					param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용							param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String)tmp_map.get("userSeqno"),""));							param_email.put("ORDER_NO", "1");							param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);							param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));							param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));							param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));							param_email.put("TO_USER_TY", "2");															if(!HtmlTag.returnString(mailto,"").equals("")){ 								sendEmail.start(param_email);							}																					result_map.put("result", true);							result_map.put("TRS_MSG", "이메일로 발송되었습니다.");						}else{							result_map.put("result", false);							result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");						}											}									// TODO : pstate : FI 본인인증, 아이핀인증				}else if(pstate.equals("FI")){					log.debug("======== CmOamDAO04 ctlCMS FI Start  ========");										tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);					if(tmp_map != null){												//비밀번호 랜덤생성해서 업데이트						String password = StringUtil.getRandomPassword(10);						//log.debug("======== CmOamDAO04 ctlCMS FI Start ========"+password);						// db암호화로 변경						//param.put("login_passwd", JasyptUtil.encSHA256(password));						param.put("login_passwd", password);						update("JiCmOam.updateLoginIpns", param);												//임시비밀번호 이메일로 발송						Map param_email = new HashMap();						String system_name = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));//전력데이터 개방 포털시스템						String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("GUBUN")));	//전력데이터 개방 포털						String emailForm = propertiesService.getString("CM_EMAIL_FORM");	//메일폼을 불러온다						String emailFormFt = propertiesService.getString("CM_EMAIL_FORM_FT");	//메일폼 하단을 불러온다						String mailFrom = propertiesService.getString("CM_ADMIN_EMAIL");	//기본관리자 메일						String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");						String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));																		String mailfrom = propertiesService.getString("CM_ADMIN_EMAIL");						String user_id = HtmlTag.StripStrInXss(HtmlTag.returnString((String) tmp_map.get("userId"),""));								String mailto = HtmlTag.returnString((String)tmp_map.get("email"),"");						String mailto_nm = HtmlTag.returnString((String)tmp_map.get("userNm"),"")+"님";						String rname = "관리자";												String emailSubject = "["+system_name+"] 비밀번호찾기 결과입니다.";						String emailTitle = "["+system_name+"] 비밀번호찾기 결과입니다.";						String emailContent = mailto_nm+"의 임시비밀번호는<br/><b>"+password+"</b> 입니다<br>로그인후 비밀번호를 변경해주시기 바랍니다.";																		emailForm = emailForm.replaceAll("\\{시스템url}",system_url).replaceAll("\\{시스템nm}",system_name);						emailForm = emailForm.replace("{제목}", emailTitle);						//emailForm = emailForm.replace("{내용}", emailContent);						// 내용 제목과 동일하게 넣어달라는 현업요구 반영						emailForm = emailForm.replace("{내용}", emailContent);																							emailForm = emailForm.replace("{내용하단}", emailFormFt.replaceAll("\\{시스템url}"								,system_url+HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"")+"/").replaceAll("\\{시스템nm}",system_name));																		param_email.put("subject", emailSubject);							//제목						param_email.put("mailfrom", "\""+gubun+"\"<"+mailfrom+">");		//발송자이메일						param_email.put("mailto", "\""+mailto_nm+"\"<"+mailto+">");		//수신자이메일						param_email.put("sql", "SSV:"+mailto);							//*** 실제발송되는 이메일***						param_email.put("gubun", gubun);								//발송시스템명						param_email.put("rname", "관리자");								//담당자명						param_email.put("content", emailForm);						//내용																																param_email.put("MENU_CD", HtmlTag.returnString((String) param.get("pcode"),""));							//내용						param_email.put("MENU_DATA_KEY", HtmlTag.returnString((String)tmp_map.get("userSeqno"),""));						param_email.put("ORDER_NO", "1");						param_email.put("REG_ID", CM_ADMIN_DEFAULT_ID);						param_email.put("FR_MAIL", HtmlTag.returnString((String) param_email.get("mailfrom"),""));						param_email.put("TO_MAIL", HtmlTag.returnString((String) param_email.get("mailto"),""));						param_email.put("TO_USER_ID", HtmlTag.returnString(user_id,""));						param_email.put("TO_USER_TY", "2");													if(!HtmlTag.returnString(mailto,"").equals("")){ 							sendEmail.start(param_email);						}																		result_map.put("result", true);						result_map.put("TRS_MSG", "이메일로 발송되었습니다.");											}else{						result_map.put("result", false);						result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");											}														// TODO : pstate : AU 인증번호 발송				}else if(pstate.equals("AU")){					log.debug("======== CmOamDAO04 ctlCMS AU Start  ========");					if(pcode.equals("000254") || pcode.equals("000255")){						param.put("chkyn", "Y");					}else{						param.put("chkyn", "N");					}										tmp_map =  (Map) select("JiCmOam.selectUserInfo", param);															if(tmp_map != null){												//인증번호 랜덤생성						String authCode = StringUtil.rpad(StringUtil.javaRandom(1000, 9999)+"", 4, "0");																								String gubun = HtmlTag.StripStrInXss(HtmlTag.returnString(propertiesService.getString("SYSTEM_NAME")));						String system_url = HtmlTag.returnString(propertiesService.getString("CM_SYSTEM_URL"),"");						String CM_ADMIN_DEFAULT_ID = HtmlTag.returnString(propertiesService.getString("CM_ADMIN_DEFAULT_ID"));										String mailto_id = (String)param.get("moblphon1")+(String)param.get("moblphon2")+(String)param.get("moblphon3");						String callback_id = "070-7511-1114";						param.put("tran_phone", mailto_id.replaceAll("-", ""));	//수신번호(숫자만)						param.put("tran_callback", callback_id.replaceAll("-", ""));	//발송번호						param.put("tran_msg", "["+gubun+"]고객님의 인증번호는["+authCode+"]입니다");		//내용						param.put("tran_etc1", gubun+"");		//발송시스템명						param.put("tran_etc2", HtmlTag.returnString((String) param.get("pcode"),""));		// board_cd						param.put("tran_etc3", "1");		// board_seq						param.put("tran_etc4", HtmlTag.returnString(propertiesService.getString("CON_ROOT"),"").replaceAll("/", "")+"");		//발송시스템						log.debug("==== sms TSMS param ====::"+param);						if(!HtmlTag.returnString((String)param.get("tran_phone"),"").equals("")){ 							result_map = sendSms.start(param);							}else{							result_map.put("result", false);						}						result_map.put("TRS_MSG", "");																	//인증번호 업데이트						param.put("authcode", authCode);						update("JiCmOam.updateAuthCode", param);												result_map.put("result", true);						result_map.put("TRS_MSG", "인증번호가 발송되었습니다.");											}else{						result_map.put("result", false);						result_map.put("TRS_MSG", "일치하는 회원정보가 존재하지 않습니다.");											}									}						}else{				result_map.put("result", false);				result_map.put("TRS_MSG", "비정상적인 접근입니다.");					//throw new JSysException("비정상적인 접근입니다.");			}		}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  "+q);				result_map.put("result",false);			throw q;					}catch(NullPointerException q){			log.debug("Exception:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("Exception:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.		}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  "+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}		    	log.debug("==== ctlCMS End ====");		return result_map;    }    }