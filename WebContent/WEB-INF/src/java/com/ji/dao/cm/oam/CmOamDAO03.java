package com.ji.dao.cm.oam;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import javax.annotation.Resource;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.stereotype.Repository;import com.ji.cm.CM_Util;import com.ji.dao.cm.CMDAO;import com.ji.dao.cm.mnm.CmMnmDAO01;import com.ji.service.CMSService;import com.ji.util.CmsDsDao;import com.ji.util.Page;import com.ji.common.HtmlTag;import com.ji.common.JSysException;import com.ji.common.Param;import egovframework.rte.fdl.property.EgovPropertyService;/**   * @Class Name : cmOamDAO03.java * @Description : cmOamDAO03 DAO Class  * @Modification Information   * @ * @  수정일      수정자              수정내용 * @ ---------   ---------   ------------------------------- * @ 2016.11.08          최초생성 *  * @author 개발프레임웍크 실행환경 개발팀 * @since 2016.11.08 * @version 1.0 * @see *  */@Repository("cmOamDAO03")public class CmOamDAO03 extends CmsDsDao {	protected Logger log = Logger.getLogger(CmOamDAO03.class); //현재 클래스 이름을 Logger에 등록	/** cmDAO */    @Resource(name="cmDAO")    private CMDAO cmDAO;        /** cmsService */    @Resource(name = "cmsService")    protected CMSService cmsService;        /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;    	/** cmDAO */    @Resource(name="cmMnmDAO01")    private CmMnmDAO01 cmMnmDAO01;    /**	 * 권한관리 메소드	 * @param Map	 * @return Map	 * @exception Exception	 */    // TODO : ctlCMS    @SuppressWarnings("unchecked")	public Map ctlCMS(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception {		log.debug("==== ctlCMS Start ====");		Map result_map = new HashMap();				String pstate = HtmlTag.returnString((String)param.get("pstate"),"L");		Map SITE_SESSION = (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));		try{						if(SITE_SESSION==null){				throw new JSysException(super.getMessage("ji.cm.common.msg.error.login.admin"));			}						if(pstate.equals("L")){						// 권한그룹리스트			}else if(pstate.equals("XL1")){ //ajax jqGrid data관련				result_map = selectListAuthGrpGrid(param); 			// 등록처리			}else if(pstate.equals("C")){				result_map = insertAuthGrp(param);								// 등록화면			}else if(pstate.equals("CF")){							// 수정처리			}else if(pstate.equals("U")){				result_map = updateAuthGrp(param);									// 수정화면			}else if(pstate.equals("UF")){				result_map = cmDAO.getformData(param, "JiCmOam.selectAuthGrpList");						// 삭제처리			}else if(pstate.equals("D")){				result_map = deleteAuthGrp(param);									// 메뉴트리를 불러온다				}else if(pstate.equals("XL2")){				log.debug("==== XL2 Start ====:");				result_map = cmMnmDAO01.selectListMenuTree(param); 				log.debug("==== XL2 End ====");							// 권한그룹 메뉴리스트			}else if(pstate.equals("XL3")){ //ajax jqGrid data관련				result_map = selectListAuthGrpMenuGrid(param);							// 권한그룹 사용자리스트			}else if(pstate.equals("XL4")){ //ajax jqGrid data관련				result_map = selectListAuthGrpUserGrid(param);												// 권한그룹 메뉴변경이력 리스트			}else if(pstate.equals("XP2")){ //ajax jqGrid data관련								param.put("sauth_grp_cd", HtmlTag.returnString((String)param.get("selsauth_grp_cd2"),""));								result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpMenuListLog");			// 권한그룹 사용자변경이력 리스트			}else if(pstate.equals("XP3")){ //ajax jqGrid data관련				param.put("sauth_grp_cd", HtmlTag.returnString((String)param.get("selsauth_grp_cd2"),""));				result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpUserListLog");							// 권한이력 3년이전 데이터 삭제			}else if(pstate.equals("DELLOG")){				result_map = deleteAuthLogJob(param);								}						}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}		    	log.debug("==== ctlCMS End ====");		return result_map;    }    			/**	 * Method Name  : selectListAuthGrpGrid	 * Description  : 	* Comment      : 	* Parameter    : param - 정보가 담긴 Map 	* form History : 2016/11/08 : 이금용:  최초작성	*/	//	TODO selectListAuthGrpGrid	public Map selectListAuthGrpGrid (Map param) throws Exception {				log.debug("==== selectListAuthGrpGrid Start ====");		Map result_map = new HashMap();				try{						result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpList"); 	  		//list("JiCmOam.selectAuthGrpList", param);					}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}		    	log.debug("==== selectListAuthGrpGrid End ====");		return result_map;	} 		/**	 * Method Name  : selectListAuthGrpMenuGrid	 * Description  : 	* Comment      : 	* Parameter    : param - 정보가 담긴 Map 	* form History : 2016/11/08 : 이금용:  최초작성	*/	//	TODO selectListAuthGrpMenuGrid	public Map selectListAuthGrpMenuGrid (Map param) throws Exception {				log.debug("==== selectListAuthGrpMenuGrid Start ====");		Map result_map = new HashMap();		try{	  					result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpMenuList");			//list("JiCmOam.selectAuthGrpMenuList", param);	  									}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}    	log.debug("==== selectListAuthGrpMenuGrid End ====");		return result_map;	} 			/**	 * Method Name  : selectListAuthGrpUserGrid	 * Description  : 	* Comment      : 	* Parameter    : param - 정보가 담긴 Map 	* form History : 2016/11/08 : 이금용:  최초작성	*/	//	TODO selectListAuthGrpUserGrid	public Map selectListAuthGrpUserGrid (Map param) throws Exception {				log.debug("==== selectListAuthGrpUserGrid Start ====");		Map result_map = new HashMap();				try{			//result_map = cmDAO.selectListGrid(param, "JiCmOam.selectAuthGrpUserList");			//list("JiCmOam.selectAuthGrpUserList", param);	  			  		List rtn_list = new ArrayList();	  		rtn_list = list("JiCmOam.selectAuthGrpUserList", param);	  			  		List gridList = cmsService.getGridListScroll(rtn_list);	  		result_map.put("rows",gridList);					}catch(JSysException q){				log.debug("ctlCMS throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("ctlCMS NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다..		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ctlCMS ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다		}catch(SQLException q){			log.debug("SQLException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다				}catch(Exception q){			log.debug("ctlCMS Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.syntax"),q);		//구문오류가 발생하였습니다.			}    	log.debug("==== selectListAuthGrpUserGrid End ====");		return result_map;	} 			/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map insertAuthGrp(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== insertAuthGrp : START ====");		Map result_map = new HashMap();		Map tmp_map = new HashMap();			    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		String sql = "";		int iseqnoJIT9130 = 0;		int iseqnoJIT9131 = 0;		int iseqnoJIT9132 = 0;		String max_code = "";				JSONArray jsonArray;		Map jsonObjmap = new HashMap();		Iterator iterator;				int i =0;		try{			// 등록자 id 셋팅			param.put("reg_id", USER_ID);										//sequence 추출				iseqnoJIT9130 = cmDAO.getTableMaxSeq("JIT9130","AUTH_GRP_SEQNO","");								//오라클, TIBERO				if(propertiesService.getString("CMS_DB_TYPE").equals("ORACLE")						|| propertiesService.getString("CMS_DB_TYPE").equals("TIBERO")){					tmp_map = cmDAO.getMaxCode("JIT9130", "AUTH_GRP_CD", 6, "^[0-9]", "");					max_code = (String)tmp_map.get("maxCode");				//MSSQL				}else if(propertiesService.getString("CMS_DB_TYPE").equals("MSSQL")){					tmp_map = cmDAO.getMaxCode("JIT9130", "AUTH_GRP_CD", 6, "[0-9]%", "");					max_code = (String)tmp_map.get("maxCode");				}				param.put("max_code", max_code);				param.put("iseqnoJIT9130", iseqnoJIT9130);				sql = "JiCmOam.insertAuthGrp";				insert(sql, param);								// 권한그룹 메뉴목록을 불러온다				jsonArray = JSONArray.fromObject(((String) param.get("JSONDataList")).replaceAll("&amp;quot;", "\""));								for(i=0;i<jsonArray.size();i++){					tmp_map = new HashMap();					jsonObjmap = JSONObject.fromObject(jsonArray.getString(i));					iterator = jsonObjmap.entrySet().iterator();						  while (iterator.hasNext()) {						   Entry entry = (Entry)iterator.next();						   tmp_map.put(entry.getKey().toString().toLowerCase(),CM_Util.nullToEmpty((String)jsonObjmap.get(entry.getKey()))); //map 데이터를 그리드 데이터에 맞게 입력					  }					  //sequence 추출					  sql = "JiCmOam.insertAuthGrpMenu"; 					  iseqnoJIT9131 = cmDAO.getTableMaxSeq("JIT9131","IDX","");					  tmp_map.put("iseqnoJIT9131", iseqnoJIT9131);					  tmp_map.put("max_code", max_code);					  tmp_map.put("reg_id", USER_ID); 					  insert(sql, tmp_map);					  					  sql = "JiCmOam.insertAuthGrpMenuLog"; 					  iseqnoJIT9131 = cmDAO.getSequence("JIT9131_LOG");					  tmp_map.put("iseqnoJIT9131", iseqnoJIT9131);					  tmp_map.put("max_code", max_code);					  tmp_map.put("reg_id", USER_ID);					  tmp_map.put("log_mode", "C");					  					  insert(sql, tmp_map);					  				}									// 권한그룹 메뉴목록을 불러온다				jsonArray = JSONArray.fromObject(((String) param.get("JSONDataList2")).replaceAll("&amp;quot;", "\""));								for(i=0;i<jsonArray.size();i++){					tmp_map = new HashMap();					jsonObjmap = JSONObject.fromObject(jsonArray.getString(i));					iterator = jsonObjmap.entrySet().iterator();						  while (iterator.hasNext()) {						   Entry entry = (Entry)iterator.next();						   tmp_map.put(entry.getKey().toString().toLowerCase(),CM_Util.nullToEmpty((String)jsonObjmap.get(entry.getKey()))); //map 데이터를 그리드 데이터에 맞게 입력					  }					  //sequence 추출					  sql = "JiCmOam.insertAuthGrpUser"; 					  iseqnoJIT9132 = cmDAO.getTableMaxSeq("JIT9132","IDX","");					  tmp_map.put("iseqnoJIT9132", iseqnoJIT9132);					  tmp_map.put("max_code", max_code);					  tmp_map.put("reg_id", USER_ID); 					  insert(sql, tmp_map);					  					  sql = "JiCmOam.insertAuthGrpUserLog"; 					  iseqnoJIT9132 = cmDAO.getSequence("JIT9132_LOG");					  tmp_map.put("iseqnoJIT9132", iseqnoJIT9132);					  tmp_map.put("max_code", max_code);					  tmp_map.put("reg_id", USER_ID);					  tmp_map.put("log_mode", "C");					  					  insert(sql, tmp_map);						  				}															result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== insertOrg : END ====");		return result_map;		}		/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map updateAuthGrp(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== updateAuthGrp : START ====");		Map result_map = new HashMap();		Map tmp_map = new HashMap();			    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));	    String sauth_grp_cd  = HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("sauth_grp_cd"),""));	    	    // 그리드 삭제정보	    String delkey		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("delkey"),""));	    String delkey2		= HtmlTag.StripStrInXss(HtmlTag.returnString((String)param.get("delkey2"),""));	    String [] delkey_sp = new String[0];	    		String sql = "";				JSONArray jsonArray;		Map jsonObjmap = new HashMap();		Iterator iterator;				int iseqnoJIT9131 = 0;		int iseqnoJIT9132 = 0;		int i =0;		try{			// 등록자 id 셋팅			param.put("reg_id", USER_ID);							sql = "JiCmOam.updateAuthGrp";				update(sql, param);								// 권한그룹 메뉴목록을 불러온다				if(!delkey.equals("")){					delkey_sp = delkey.split(",");										param.put("delkey", delkey);					param.put("delkey_sp", delkey_sp);										sql = "JiCmOam.insertAuthGrpMenuLogD"; 					param.put("log_mode", "D");				  					insert(sql, param);											sql = "JiCmOam.deleteAuthGrpMenu"; 					delete(sql, param);									}												jsonArray = JSONArray.fromObject(((String) param.get("JSONDataList")).replaceAll("&amp;quot;", "\""));								for(i=0;i<jsonArray.size();i++){					tmp_map = new HashMap();					jsonObjmap = JSONObject.fromObject(jsonArray.getString(i));					iterator = jsonObjmap.entrySet().iterator();						  while (iterator.hasNext()) {						   Entry entry = (Entry)iterator.next();						   tmp_map.put(entry.getKey().toString().toLowerCase(),CM_Util.nullToEmpty((String)jsonObjmap.get(entry.getKey()))); //map 데이터를 그리드 데이터에 맞게 입력					  }					  // 키값이 없으면 등록이다					  if("".equals((String)tmp_map.get("idx"))){						  //sequence 추출						  sql = "JiCmOam.insertAuthGrpMenu"; 						  iseqnoJIT9131 = cmDAO.getTableMaxSeq("JIT9131","IDX","");						  tmp_map.put("iseqnoJIT9131", iseqnoJIT9131);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID); 						  insert(sql, tmp_map);								  						  sql = "JiCmOam.insertAuthGrpMenuLog"; 						  iseqnoJIT9131 = cmDAO.getSequence("JIT9131_LOG");						  tmp_map.put("iseqnoJIT9131", iseqnoJIT9131);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID);						  tmp_map.put("log_mode", "C");						  						  insert(sql, tmp_map);						  					  }else{						  sql = "JiCmOam.updateAuthGrpMenu";						  tmp_map.put("sauth_grp_cd", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID); 						  update(sql, tmp_map);							  						  sql = "JiCmOam.insertAuthGrpMenuLog"; 						  iseqnoJIT9131 = cmDAO.getSequence("JIT9131_LOG");						  tmp_map.put("iseqnoJIT9131", iseqnoJIT9131);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID);						  tmp_map.put("log_mode", "U");						  					  }				}									// 권한그룹 사용자목록을 불러온다				if(!delkey2.equals("")){					delkey_sp = delkey2.split(",");					sql = "JiCmOam.insertAuthGrpUserLogD"; 					param.put("delkey", delkey2);					param.put("delkey_sp", delkey_sp);										param.put("log_mode", "D");				  					insert(sql, param);											sql = "JiCmOam.deleteAuthGrpUser"; 									delete(sql, param);														}								jsonArray = JSONArray.fromObject(((String) param.get("JSONDataList2")).replaceAll("&amp;quot;", "\""));								for(i=0;i<jsonArray.size();i++){					tmp_map = new HashMap();					jsonObjmap = JSONObject.fromObject(jsonArray.getString(i));					iterator = jsonObjmap.entrySet().iterator();						  while (iterator.hasNext()) {						   Entry entry = (Entry)iterator.next();						   tmp_map.put(entry.getKey().toString().toLowerCase(),CM_Util.nullToEmpty((String)jsonObjmap.get(entry.getKey()))); //map 데이터를 그리드 데이터에 맞게 입력					  }					  // 키값이 없으면 등록이다					  if("".equals((String)tmp_map.get("idx"))){						  //sequence 추출						  sql = "JiCmOam.insertAuthGrpUser"; 						  iseqnoJIT9132 = cmDAO.getTableMaxSeq("JIT9132","IDX","");						  tmp_map.put("iseqnoJIT9132", iseqnoJIT9132);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID); 						  insert(sql, tmp_map);						  						  sql = "JiCmOam.insertAuthGrpUserLog"; 						  iseqnoJIT9132 = cmDAO.getSequence("JIT9132_LOG");						  tmp_map.put("iseqnoJIT9132", iseqnoJIT9132);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID);						  tmp_map.put("log_mode", "C");						  						  insert(sql, tmp_map);							  			  					  }else{						  sql = "JiCmOam.updateAuthGrpUser";						  tmp_map.put("sauth_grp_cd", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID); 						  update(sql, tmp_map);							  						  sql = "JiCmOam.insertAuthGrpUserLog"; 						  iseqnoJIT9132 = cmDAO.getSequence("JIT9132_LOG");						  tmp_map.put("iseqnoJIT9132", iseqnoJIT9132);						  tmp_map.put("max_code", sauth_grp_cd);						  tmp_map.put("reg_id", USER_ID);						  tmp_map.put("log_mode", "U");						  						  insert(sql, tmp_map);						  					  }				}											result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> :  "+q);				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  "+q);				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== updateAuthGrp : END ====");		return result_map;		}			/**	* <p> ctlAB(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		public Map deleteAuthGrp(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.debug("==== deleteAuthGrp : START ====");		Map result_map = new HashMap();			    Map SITE_ADM_SESSION		= (Map)param.get(propertiesService.getString("SITE_ADM_SESSION_FN"));	    String USER_ID			= HtmlTag.StripStrInXss(HtmlTag.returnString((String)SITE_ADM_SESSION.get("USER_ID"),""));		String sql = "";				int i =0;		try{			// 등록자 id 셋팅			param.put("reg_id", USER_ID);							sql = "JiCmOam.deleteAuthGrp";				update(sql, param);								param.put("delkey", "");				sql = "JiCmOam.insertAuthGrpMenuLogD"; 				param.put("log_mode", "D");				  				insert(sql, param);								sql = "JiCmOam.deleteAuthGrpMenu"; 				delete(sql, param);								sql = "JiCmOam.insertAuthGrpUserLogD"; 				param.put("log_mode", "D");				  				insert(sql, param);														sql = "JiCmOam.deleteAuthGrpUser"; 				delete(sql, param);											result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");				}catch(JSysException q){				log.debug("throw JSysException >>>>> :  ");				throw q;				}catch(NullPointerException q){			log.debug("NullPointerException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.debug("ArrayIndexOutOfBoundsException:");			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.debug("JSysException Exception >>>>> :  ");				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.debug("==== updateAuthGrp : END ====");		return result_map;		}			/**	* <p> ctlCms(메인Dao컨트롤클래스)에서 해당데이터를 등록하는 메소드</p>	* Precondition : param에 해당 파라메터가 들어 있어야한다 	* 				 쿼리가 정의되어야한다	* Postcondition: 등록 결과를 받아서 리턴한다	*	* @param   param		Map		입력데이터	*	* @return  등록 결과값을 리턴한다	 * @throws JSysException 	* @throws  	*/		// TODO : deleteAuthLogJob	public Map deleteAuthLogJob(Map param) throws IOException, SQLException, NullPointerException, ArrayIndexOutOfBoundsException, Exception{		log.error("==== CmOamDAO03 deleteAuthLogJob : START ====");				    		Map result_map = new HashMap();		Map query_param = new HashMap();		Map rtn_map = new HashMap();		List rtn_list = new ArrayList();				int i = 0;   	    String sql_id="";	    String initipns = "";		try{			sql_id="JiCmOam.deleteAuthLogJob";			getSqlMapClientTemplate().queryForObject(sql_id, param);							result_map.put("result", true);			result_map.put(propertiesService.getString("RESULT_STA_KEY"),propertiesService.getString("FORWARD_SUCCESS"));			result_map.put(propertiesService.getString("RESULT_URL_R_KEY"),"Y");						}catch(JSysException q){				log.error("deleteAuthLogJob throw JSysException >>>>> :  "+q);				throw q;				}catch(NullPointerException q){			log.error("deleteAuthLogJob NullPointerException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		//저장 중 오류가 발행하였습니다.		}catch(ArrayIndexOutOfBoundsException q){			log.error("deleteAuthLogJob ArrayIndexOutOfBoundsException:"+q);			throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}catch(Exception q){							log.error("deleteAuthLogJob JSysException Exception >>>>> :  "+q);				throw new JSysException(super.getMessage("ji.cm.common.msg.error.save"),q);		///저장 중 오류가 발행하였습니다.		}finally{			result_map.put(propertiesService.getString("RESULT_URL_T_KEY"),"parent");		}		log.error("==== CmOamDAO03 deleteAuthLogJob : END ====");		return result_map;		}	}