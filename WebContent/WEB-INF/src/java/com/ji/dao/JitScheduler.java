package com.ji.dao;

import java.net.InetAddress;import java.util.HashMap;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import com.ji.common.JSysException;import com.ji.service.CMService;import egovframework.rte.fdl.property.EgovPropertyService;
//@Componentpublic class JitScheduler {
	protected Logger log = Logger.getLogger(JitScheduler.class); //현재 클래스 이름을 Logger에 등록
    /** EgovPropertyService */    @Resource(name = "propertiesService")    protected EgovPropertyService propertiesService;        @Resource(name ="cmService")    protected CMService cmService;    	//이러면 30초마다 실행되는 것이다.	//	@Scheduled(cron="*/30 * * * * *") 	//	/*스케쥴러 cron 양식	 	초 0-59 , - * / 	분 0-59 , - * / 	시 0-23 , - * / 	일 1-31 , - * ? / L W	월 1-12 or JAN-DEC , - * / 	요일 1-7 or SUN-SAT , - * ? / L # 	년(옵션) 1970-2099 , - * /	* : 모든 값	? : 특정 값 없음	- : 범위 지정에 사용	, : 여러 값 지정 구분에 사용	/ : 초기값과 증가치 설정에 사용	L : 지정할 수 있는 범위의 마지막 값	W : 월~금요일 또는 가장 가까운 월/금요일	# : 몇 번째 무슨 요일 2#1 => 첫 번째 월요일	 	예제) Expression Meaning 	초 분 시 일 월 주(년)	 "0 0 12 * * ?" : 아무 요일, 매월, 매일 12:00:00	 "0 15 10 ? * *" : 모든 요일, 매월, 아무 날이나 10:15:00 	 "0 15 10 * * ?" : 아무 요일, 매월, 매일 10:15:00 	 "0 15 10 * * ? *" : 모든 연도, 아무 요일, 매월, 매일 10:15 	 "0 15 10 * * ? : 2005" 2005년 아무 요일이나 매월, 매일 10:15 	 "0 * 14 * * ?" : 아무 요일, 매월, 매일, 14시 매분 0초 	 "0 0/5 14 * * ?" : 아무 요일, 매월, 매일, 14시 매 5분마다 0초 	 "0 0/5 14,18 * * ?" : 아무 요일, 매월, 매일, 14시, 18시 매 5분마다 0초 	 "0 0-5 14 * * ?" : 아무 요일, 매월, 매일, 14:00 부터 매 14:05까지 매 분 0초 	 "0 10,44 14 ? 3 WED" : 3월의 매 주 수요일, 아무 날짜나 14:10:00, 14:44:00 	 "0 15 10 ? * MON-FRI" : 월~금, 매월, 아무 날이나 10:15:00 	 "0 15 10 15 * ?" : 아무 요일, 매월 15일 10:15:00 	 "0 15 10 L * ?" : 아무 요일, 매월 마지막 날 10:15:00 	 "0 15 10 ? * 6L" : 매월 마지막 금요일 아무 날이나 10:15:00 	 "0 15 10 ? * 6L 2002-2005" : 2002년부터 2005년까지 매월 마지막 금요일 아무 날이나 10:15:00 	 "0 15 10 ? * 6#3" : 매월 3번째 금요일 아무 날이나 10:15:00		 	@Scheduled(fixedDelay=1000)	 1000 적으면 1초 인것이다!!!!	 	 */	// TODO : schAliveChk    @Scheduled(fixedDelay=600000)	public void schAliveChk() {		Map param = new HashMap();		try {			log.error("schAliveChk 배치 실행 .. .. "); 			InetAddress ip = InetAddress.getLocalHost(); 			//log.debug("ip:=============>:"+ip.getHostAddress()); 			if(ip.getHostAddress().equals("124.136.8.11") || ip.getHostAddress().equals("100.132.5.98")){ 				log.error("#1 WAS schAliveChk 배치 실행 .. .. "); 			}else{ 				log.debug("#2 WAS schAliveChk  배치 실행 .. .. "); 			}											} catch (JSysException e) {			log.debug("schAliveChk 배치에서 예외사항1 .. ");		} catch (Exception e) {			log.debug("schAliveChk 배치에서 예외사항2 .. ");		}	}    		/**	 * 인사 정보를 연계한다	 * 일  배치 초 분 시 일 월 년 :  매일 05시 10분 01초에 실행	 */    	// TODO : insertJIT9120_UPDATEJob    @Scheduled(cron = "01 10 05 * * ?")    //@Scheduled(cron = "01 30 11 * * ?")	public void insertJIT9120_UPDATEJob() {		Map param = new HashMap();		try {			log.error("insertJIT9120_UPDATEJob Batch Run .. .. "); 			InetAddress ip = InetAddress.getLocalHost(); 			//log.debug("ip:=============>:"+ip.getHostAddress()); 			if(ip.getHostAddress().equals("124.136.8.11") || ip.getHostAddress().equals("100.132.5.98")){ 				log.error("#1 WAS insertJIT9120_UPDATEJob  Batch Start .. .. "); 				cmService.insertJIT9120_UPDATEJob(param); 				log.error("#1 WAS insertJIT9120_UPDATEJob  Batch End .. .. "); 			}else{ 				log.debug("#2 WAS insertJIT9120_UPDATEJob  Batch Run .. .. "); 			}									} catch (JSysException e) {			log.error("insertJIT9120_UPDATEJob 배치에서 예외사항1 .. ");		} catch (Exception e) {			log.error("insertJIT9120_UPDATEJob 배치에서 예외사항2 .. ");		}	}	         	/**	 * 권한변경이력정보 3년이상된자료를 삭제한다	 * 일  배치 초 분 시 일 월 년 :  매일 02시 10분 01초에 실행	 */    	// TODO : deleteAuthLogJob    @Scheduled(cron = "01 10 02 * * ?")	public void deleteAuthLogJob() {		Map param = new HashMap();		try {			log.error("deleteAuthLogJob Batch Run .. .. "); 			InetAddress ip = InetAddress.getLocalHost(); 			//log.debug("ip:=============>:"+ip.getHostAddress()); 			if(ip.getHostAddress().equals("124.136.8.11") || ip.getHostAddress().equals("100.132.5.98")){ 				log.error("#1 WAS deleteAuthLogJob  Batch Start .. .. "); 				cmService.deleteAuthLogJob(param); 				log.error("#1 WAS deleteAuthLogJob  Batch End .. .. "); 			}else{ 				log.debug("#2 WAS deleteAuthLogJob  Batch Run .. .. "); 			}									} catch (JSysException e) {			log.error("deleteAuthLogJob 배치에서 예외사항1 .. ");		} catch (Exception e) {			log.error("deleteAuthLogJob 배치에서 예외사항2 .. ");		}	}     	/**	 * 접속이력정보 6개월 이상된자료를 삭제한다	 * 일  배치 초 분 시 일 월 년 :  매일 02시 20분 01초에 실행	 */    	// TODO : deleteAccessLogJob//    @Scheduled(cron = "01 20 02 * * ?")	public void deleteAccessLogJob() {		Map param = new HashMap();		try {			log.error("deleteAccessLogJob Batch Run .. .. "); 			InetAddress ip = InetAddress.getLocalHost(); 			//log.debug("ip:=============>:"+ip.getHostAddress()); 			if(ip.getHostAddress().equals("124.136.8.11") || ip.getHostAddress().equals("100.132.5.98")){ 				log.error("#1 WAS deleteAccessLogJob  Batch Start .. .. "); 				cmService.deleteAccessLogJob(param); 				log.error("#1 WAS deleteAccessLogJob  Batch End .. .. "); 			}else{ 				log.debug("#2 WAS deleteAccessLogJob  Batch Run .. .. "); 			}									} catch (JSysException e) {			log.error("deleteAccessLogJob 배치에서 예외사항1 .. ");		} catch (Exception e) {			log.error("deleteAccessLogJob 배치에서 예외사항2 .. ");		}	}      
}
